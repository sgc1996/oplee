[{"contents":"How it works The accordion uses collapse internally to make it collapsible. To render an accordion that\u0026rsquo;s expanded, add the .open class on the .accordion.\nThe animation effect of this component is dependent on the prefers-reduced-motion media query. See the reduced motion section of our accessibility documentation.  Example Click the accordions below to expand/collapse the accordion content.\nAccordion Item #1   This is the first item's accordion body. It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.    Accordion Item #2   This is the second item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.    Accordion Item #3   This is the third item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.      View example's code      Flush Add .accordion-flush to remove some borders and rounded corners to render accordions edge-to-edge with their parent container.\nAccordion Item #1   Placeholder content for this accordion, which is intended to demonstrate the .accordion-flush class. This is the first item's accordion body.   Accordion Item #2   Placeholder content for this accordion, which is intended to demonstrate the .accordion-flush class. This is the second item's accordion body. Let's imagine this being filled with some actual content.   Accordion Item #3   Placeholder content for this accordion, which is intended to demonstrate the .accordion-flush class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.     View example's code      Always open Omit the data-bs-parent attribute on each .accordion-collapse to make accordion items stay open when another item is opened.\nAccordion Item #1   This is the first item's accordion body. It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.    Accordion Item #2   This is the second item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.    Accordion Item #3   This is the third item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.      View example's code      Accessibility Please read the collapse accessibility section for more information.\nCSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, accordions now use local CSS variables on .accordion for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_accordion.scss     Sass variables src/assets/scss/_theme-variables.scss     ","description":"Build vertically collapsing accordions in combination with our Collapse JavaScript plugin.","permalink":"/docs/components/accordion.html","tags":null,"title":"Accordion"},{"contents":"Examples Alerts are available for any length of text, as well as an optional close button. For proper styling, use one of the eight required contextual classes (e.g., .alert-success). For inline dismissal, use the alerts JavaScript plugin.\nHeads up! As of v5.3.0, the alert-variant() Sass mixin is deprecated. Alert variants now have their CSS variables overridden in the Sass loop.  A simple primary alert—check it out!  A simple secondary alert—check it out!  A simple success alert—check it out!  A simple danger alert—check it out!  A simple warning alert—check it out!  A simple info alert—check it out!  A simple light alert—check it out!  A simple dark alert—check it out!   View example's code      Accessibility tip: Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the .visually-hidden class.  Live example Click the button below to show an alert (hidden with inline styles to start), then dismiss (and destroy) it with the built-in close button.\n Show live alert  View example's code      We use the following JavaScript to trigger our live alert demo:\nLink color Use the .alert-link utility class to quickly provide matching colored links within any alert.\nA simple primary alert with an example link. Give it a click if you like.  A simple secondary alert with an example link. Give it a click if you like.  A simple success alert with an example link. Give it a click if you like.  A simple danger alert with an example link. Give it a click if you like.  A simple warning alert with an example link. Give it a click if you like.  A simple info alert with an example link. Give it a click if you like.  A simple light alert with an example link. Give it a click if you like.  A simple dark alert with an example link. Give it a click if you like.   View example's code      Additional content Alerts can also contain additional HTML elements like headings, paragraphs and dividers.\nWell done! Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\n Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\n  View example's code      Icons Similarly, you can use flexbox utilities and Bootstrap Icons to create alerts with icons. Depending on your icons and content, you may want to add more utilities or custom styles.\n  An example alert with an icon    View example's code      Need more than one icon for your alerts? Consider using more Bootstrap Icons and making a local SVG sprite like so to easily reference the same icons repeatedly.\n      An example alert with an icon     An example success alert with an icon     An example warning alert with an icon     An example danger alert with an icon    View example's code      Dismissing Using the alert JavaScript plugin, it\u0026rsquo;s possible to dismiss any alert inline. Here\u0026rsquo;s how:\n Be sure you\u0026rsquo;ve loaded the alert plugin, or the compiled Bootstrap JavaScript. Add a close button and the .alert-dismissible class, which adds extra padding to the right of the alert and positions the close button. On the close button, add the data-bs-dismiss=\u0026quot;alert\u0026quot; attribute, which triggers the JavaScript functionality. Be sure to use the \u0026lt;button\u0026gt; element with it for proper behavior across all devices. To animate alerts when dismissing them, be sure to add the .fade and .show classes.  You can see this in action with a live demo:\nHoly guacamole! You should check in on some of those fields below.    View example's code      warning \u0026gt;}} When an alert is dismissed, the element is completely removed from the page structure. If a keyboard user dismisses the alert using the close button, their focus will suddenly be lost and, depending on the browser, reset to the start of the page/document. For this reason, we recommend including additional JavaScript that listens for the closed.bs.alert event and programmatically sets focus() to the most appropriate location in the page. If you\u0026rsquo;re planning to move focus to a non-interactive element that normally does not receive focus, make sure to add tabindex=\u0026quot;-1\u0026quot; to the element.  CSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, alerts now use local CSS variables on .alert for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_alert.scss     Sass variables src/assets/scss/_theme-variables.scss     Sass loop Loop that generates the modifier classes with the alert-variant() mixin.\nscss/bootstrap/_alert.scss     JavaScript behavior Initialize Initialize elements as alerts\ninfo \u0026gt;}} For the sole purpose of dismissing an alert, it isn\u0026rsquo;t necessary to initialize the component manually via the JS API. By making use of data-bs-dismiss=\u0026quot;alert\u0026quot;, the component will be initialized automatically and properly dismissed.\nSee the triggers section for more details.\n Triggers Dismissal can be achieved with the data attribute on a button within the alert as demonstrated below:\nor on a button outside the alert using the data-bs-target as demonstrated below:\nNote that closing an alert will remove it from the DOM.\nMethods You can create an alert instance with the alert constructor, for example:\nThis makes an alert listen for click events on descendant elements which have the data-bs-dismiss=\u0026quot;alert\u0026quot; attribute. (Not necessary when using the data-api’s auto-initialization.)\n  Method Description     close Closes an alert by removing it from the DOM. If the .fade and .show classes are present on the element, the alert will fade out before it is removed.   dispose Destroys an element\u0026rsquo;s alert. (Removes stored data on the DOM element)   getInstance Static method which allows you to get the alert instance associated to a DOM element. For example: bootstrap.Alert.getInstance(alert).   getOrCreateInstance Static method which returns an alert instance associated to a DOM element or create a new one in case it wasn\u0026rsquo;t initialized. You can use it like this: bootstrap.Alert.getOrCreateInstance(element).    Basic usage:\nEvents Bootstrap\u0026rsquo;s alert plugin exposes a few events for hooking into alert functionality.\n  Event Description     close.bs.alert Fires immediately when the close instance method is called.   closed.bs.alert Fired when the alert has been closed and CSS transitions have completed.    ","description":"Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.","permalink":"/docs/components/alerts.html","tags":null,"title":"Alerts"},{"contents":"Accessibility tip: Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the .visually-hidden class.  Background color Similar to the contextual text color classes, set the background of an element to any contextual class. Background utilities do not set color, so in some cases you\u0026rsquo;ll want to use .text-* color utilities.\nBackground utilities like .bg-* that generated from our original $theme-colors Sass map don\u0026rsquo;t yet respond to color modes, however, any .bg-*-subtle utility will. This will be resolved in v6.  .bg-primary .bg-secondary .bg-success .bg-danger .bg-warning .bg-info .bg-light .bg-dark .bg-body .bg-black .bg-white .bg-transparent  View example's code      Background gradient By adding a .bg-gradient class, a linear gradient is added as background image to the backgrounds. This gradient starts with a semi-transparent white which fades out to the bottom.\nDo you need a gradient in your custom CSS? Just add background-image: var(--bs-gradient);.\n.bg-primary.bg-gradient .bg-secondary.bg-gradient .bg-success.bg-gradient .bg-danger.bg-gradient .bg-warning.bg-gradient .bg-info.bg-gradient .bg-light.bg-gradient .bg-dark.bg-gradient .bg-black.bg-gradient Opacity Added in v5.1.0 As of v5.1.0, background-color utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.\nHow it works Consider our default .bg-success utility.\nWe use an RGB version of our --bs-success (with the value of 25, 135, 84) CSS variable and attached a second CSS variable, --bs-bg-opacity, for the alpha transparency (with a default value 1 thanks to a local CSS variable). That means anytime you use .bg-success now, your computed color value is rgba(25, 135, 84, 1). The local CSS variable inside each .bg-* class avoids inheritance issues so nested instances of the utilities don\u0026rsquo;t automatically have a modified alpha transparency.\nExample To change that opacity, override --bs-bg-opacity via custom styles or inline styles.\nThis is default success background This is 50% opacity success background  View example's code      Or, choose from any of the .bg-opacity utilities:\nThis is default success background This is 75% opacity success background This is 50% opacity success background This is 25% opacity success background This is 10% opacity success background  View example's code      SCSS In addition to the following Sass functionality, consider reading about our included CSS custom properties (aka CSS variables) for colors and more.\nSass variables Most background-color utilities are generated by our theme colors, reassigned from our generic color palette variables.\nsrc/assets/scss/_theme-variables.scss     src/assets/scss/_theme-variables.scss     src/assets/scss/_theme-variables.scss     Grayscale colors are also available, but only a subset are used to generate any utilities.\nsrc/assets/scss/_theme-variables.scss     Sass maps Theme colors are then put into a Sass map so we can loop over them to generate our utilities, component modifiers, and more.\nsrc/assets/scss/_theme-variables.scss     Grayscale colors are also available as a Sass map. This map is not used to generate any utilities.\nsrc/assets/scss/_theme-variables.scss     RGB colors are generated from a separate Sass map:\nscss/bootstrap/_maps.scss     Background color opacities build on that with their own map that\u0026rsquo;s consumed by the utilities API:\nscss/bootstrap/_maps.scss     Sass mixins No mixins are used to generate our background utilities, but we do have some additional mixins for other situations where you\u0026rsquo;d like to create your own gradients.\nscss/bootstrap/mixins/_gradients.scss     scss/bootstrap/mixins/_gradients.scss     Utilities API Background utilities are declared in our utilities API in scss/_utilities.scss. Learn how to use the utilities API.\nscss/bootstrap/_utilities.scss     ","description":"Convey meaning through `background-color` and add decoration with gradients.","permalink":"/docs/components/background.html","tags":null,"title":"Background"},{"contents":"Examples Badges scale to match the size of the immediate parent element by using relative font sizing and em units. As of v5, badges no longer have focus or hover styles for links.\nHeadings Example heading New Example heading New Example heading New Example heading New Example heading New Example heading New  View example's code      Buttons Badges can be used as part of links or buttons to provide a counter.\nNotifications 4   View example's code      Note that depending on how they are used, badges may be confusing for users of screen readers and similar assistive technologies. While the styling of badges provides a visual cue as to their purpose, these users will simply be presented with the content of the badge. Depending on the specific situation, these badges may seem like random additional words or numbers at the end of a sentence, link, or button.\nUnless the context is clear (as with the \u0026ldquo;Notifications\u0026rdquo; example, where it is understood that the \u0026ldquo;4\u0026rdquo; is the number of notifications), consider including additional context with a visually hidden piece of additional text.\nPositioned Use utilities to modify a .badge and position it in the corner of a link or button.\nInbox 99+ unread messages    View example's code      You can also replace the .badge class with a few more utilities without a count for a more generic indicator.\nProfile New alerts    View example's code      Background colors Added in v5.2.0 Set a background-color with contrasting foreground color with our .text-bg-{color} helpers. Previously it was required to manually pair your choice of .text-{color} and .bg-{color} utilities for styling, which you still may use if you prefer.\nPrimary Secondary Success Danger Warning Info Light Dark  View example's code      Accessibility tip: Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the .visually-hidden class.  Pill badges Use the .rounded-pill utility class to make badges more rounded with a larger border-radius.\nPrimary Secondary Success Danger Warning Info Light Dark  View example's code      CSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, badges now use local CSS variables on .badge for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_badge.scss     Sass variables src/assets/scss/_theme-variables.scss     ","description":"Documentation and examples for badges, our small count and labeling component.","permalink":"/docs/components/badges.html","tags":null,"title":"Badges"},{"contents":"Style 01 25% off EverythingMakeup with extended range in colors for every human.\nShop Sale     View example's code      Style 02 Empower YourselfGet the skin you want to feel\nExplore More     View example's code      Style 03 Summer CollectionStarting at $17.99\nShop Now     View example's code      Style 04 Autumn SkincareDisvover Now      View example's code      Style 05 Essenstial ItemsBuy 1 Get 1     View example's code      Style 06 NEW COLLECTIONDiscover Our Autumn SkincareExplore More     View example's code      Style 07 25% off EverythingMakeup with extended range in colors for every human.\nShop Sale     View example's code      Style 08       View example's code      ","description":null,"permalink":"/docs/components/banner.html","tags":null,"title":"Banner"},{"contents":"Examples Bootstrap includes several predefined button styles, each serving its own semantic purpose, with a few extras thrown in for more control.\nPrimary Secondary Success Danger Warning Info Light Dark Link  View example's code      Accessibility tip: Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the .visually-hidden class.  Disable text wrapping If you don\u0026rsquo;t want the button text to wrap, you can add the .text-nowrap class to the button. In Sass, you can set $btn-white-space: nowrap to disable text wrapping for each button.\nButton tags The .btn classes are designed to be used with the \u0026lt;button\u0026gt; element. However, you can also use these classes on \u0026lt;a\u0026gt; or \u0026lt;input\u0026gt; elements (though some browsers may apply a slightly different rendering).\nWhen using button classes on \u0026lt;a\u0026gt; elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a role=\u0026quot;button\u0026quot; to appropriately convey their purpose to assistive technologies such as screen readers.\nLink Button  View example's code      Outline buttons In need of a button, but not the hefty background colors they bring? Replace the default modifier classes with the .btn-outline-* ones to remove all background images and colors on any button.\nPrimary Secondary Success Danger Warning Info Light Dark  View example's code      Some of the button styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.  Sizes Fancy larger or smaller buttons? Add .btn-lg or .btn-sm for additional sizes.\nLarge button Large button  View example's code      Small button Small button  View example's code      You can even roll your own custom sizing with CSS variables:\nCustom button   View example's code      Disabled state Make buttons look inactive by adding the disabled boolean attribute to any \u0026lt;button\u0026gt; element. Disabled buttons have pointer-events: none applied to, preventing hover and active states from triggering.\nPrimary button Button Primary button Button  View example's code      Disabled buttons using the \u0026lt;a\u0026gt; element behave a bit different:\n \u0026lt;a\u0026gt;s don\u0026rsquo;t support the disabled attribute, so you must add the .disabled class to make it visually appear disabled. Some future-friendly styles are included to disable all pointer-events on anchor buttons. Disabled buttons using \u0026lt;a\u0026gt; should include the aria-disabled=\u0026quot;true\u0026quot; attribute to indicate the state of the element to assistive technologies. Disabled buttons using \u0026lt;a\u0026gt; should not include the href attribute.  Primary link Link  View example's code      Link functionality caveat To cover cases where you have to keep the href attribute on a disabled link, the .disabled class uses pointer-events: none to try to disable the link functionality of \u0026lt;a\u0026gt;s. Note that this CSS property is not yet standardized for HTML, but all modern browsers support it. In addition, even in browsers that do support pointer-events: none, keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, in addition to aria-disabled=\u0026quot;true\u0026quot;, also include a tabindex=\u0026quot;-1\u0026quot; attribute on these links to prevent them from receiving keyboard focus, and use custom JavaScript to disable their functionality altogether.\nPrimary link Link  View example's code      Block buttons Create responsive stacks of full-width, \u0026ldquo;block buttons\u0026rdquo; like those in Bootstrap 4 with a mix of our display and gap utilities. By using utilities instead of button specific classes, we have much greater control over spacing, alignment, and responsive behaviors.\nButton Button   View example's code      Here we create a responsive variation, starting with vertically stacked buttons until the md breakpoint, where .d-md-block replaces the .d-grid class, thus nullifying the gap-4 utility. Resize your browser to see them change.\nButton Button   View example's code      You can adjust the width of your block buttons with grid column width classes. For example, for a half-width \u0026ldquo;block button\u0026rdquo;, use .col-6. Center it horizontally with .mx-auto, too.\nButton Button   View example's code      Additional utilities can be used to adjust the alignment of buttons when horizontal. Here we\u0026rsquo;ve taken our previous responsive example and added some flex utilities and a margin utility on the button to right align the buttons when they\u0026rsquo;re no longer stacked.\nButton Button   View example's code      Button plugin The button plugin allows you to create simple on/off toggle buttons.\nVisually, these toggle buttons are identical to the checkbox toggle buttons. However, they are conveyed differently by assistive technologies: the checkbox toggles will be announced by screen readers as \u0026ldquo;checked\u0026rdquo;/\u0026ldquo;not checked\u0026rdquo; (since, despite their appearance, they are fundamentally still checkboxes), whereas these toggle buttons will be announced as \u0026ldquo;button\u0026rdquo;/\u0026ldquo;button pressed\u0026rdquo;. The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button.  Toggle states Add data-bs-toggle=\u0026quot;button\u0026quot; to toggle a button\u0026rsquo;s active state. If you\u0026rsquo;re pre-toggling a button, you must manually add the .active class and aria-pressed=\u0026quot;true\u0026quot; to ensure that it is conveyed appropriately to assistive technologies.\nToggle button Active toggle button Disabled toggle button  View example's code      Toggle link Active toggle link Disabled toggle link  View example's code      Methods You can create a button instance with the button constructor, for example:\n  Method Description     dispose Destroys an element\u0026rsquo;s button. (Removes stored data on the DOM element)   getInstance Static method which allows you to get the button instance associated to a DOM element, you can use it like this: bootstrap.Button.getInstance(element).   getOrCreateInstance Static method which returns a button instance associated to a DOM element or create a new one in case it wasn\u0026rsquo;t initialized. You can use it like this: bootstrap.Button.getOrCreateInstance(element).   toggle Toggles push state. Gives the button the appearance that it has been activated.    For example, to toggle all buttons\nCSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, buttons now use local CSS variables on .btn for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_buttons.scss     Each .btn-* modifier class updates the appropriate CSS variables to minimize additional CSS rules with our button-variant(), button-outline-variant(), and button-size() mixins.\nSass variables src/assets/scss/_theme-variables.scss     Sass mixins There are three mixins for buttons: button and button outline variant mixins (both based on $theme-colors), plus a button size mixin.\nscss/bootstrap/mixins/_buttons.scss     scss/bootstrap/mixins/_buttons.scss     scss/bootstrap/mixins/_buttons.scss     Sass loops Button variants (for regular and outline buttons) use their respective mixins with our $theme-colors map to generate the modifier classes in scss/bootstrap/_buttons.scss.\nscss/bootstrap/_buttons.scss     ","description":"Use Bootstrap's custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.","permalink":"/docs/components/buttons.html","tags":null,"title":"Buttons"},{"contents":"About A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you\u0026rsquo;re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.\nExample Cards are built with as little markup and styles as possible, but still manage to deliver a ton of control and customization. Built with flexbox, they offer easy alignment and mix well with other Bootstrap components. They have no margin by default, so use spacing utilities as needed.\nBelow is an example of a basic card with mixed content and a fixed width. Cards have no fixed width to start, so they\u0026rsquo;ll naturally fill the full width of its parent element. This is easily customized with our various sizing options.\nPlaceholderImage cap Card title Some quick example text to build on the card title and make up the bulk of the card's content.\nGo somewhere    View example's code      Content types Cards support a wide variety of content, including images, text, list groups, links, and more. Below are examples of what\u0026rsquo;s supported.\nBody The building block of a card is the .card-body. Use it whenever you need a padded section within a card.\nThis is some text within a card body.    View example's code      Titles, text, and links Card titles are used by adding .card-title to a \u0026lt;h*\u0026gt; tag. In the same way, links are added and placed next to each other by adding .card-link to an \u0026lt;a\u0026gt; tag.\nSubtitles are used by adding a .card-subtitle to a \u0026lt;h*\u0026gt; tag. If the .card-title and the .card-subtitle items are placed in a .card-body item, the card title and subtitle are aligned nicely.\nCard title Card subtitle Some quick example text to build on the card title and make up the bulk of the card's content.\nCard link Another link    View example's code      Images .card-img-top places an image to the top of the card. With .card-text, text can be added to the card. Text within .card-text can also be styled with the standard HTML tags.\nPlaceholderImage cap Some quick example text to build on the card title and make up the bulk of the card's content.\n   View example's code      List groups Create lists of content in a card with a flush list group.\nAn item A second item A third item    View example's code      Featured  An item A second item A third item    View example's code      An item A second item A third item  Card footer    View example's code      Kitchen sink Mix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group—all wrapped in a fixed-width card.\nPlaceholderImage cap Card title Some quick example text to build on the card title and make up the bulk of the card's content.\n An item A second item A third item  Card link Another link    View example's code      Header and footer Add an optional header and/or footer within a card.\nFeatured  Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    View example's code      Card headers can be styled by adding .card-header to \u0026lt;h*\u0026gt; elements.\nFeatured Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    View example's code      Quote  A well-known quote, contained in a blockquote element.\nSomeone famous in Source Title     View example's code      Featured  Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere  2 days ago    View example's code      Sizing Cards assume no specific width to start, so they\u0026rsquo;ll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities.\nUsing grid markup Using the grid, wrap cards in columns and rows as needed.\nSpecial title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere      View example's code      Using utilities Use our handful of available sizing utilities to quickly set a card\u0026rsquo;s width.\nCard title With supporting text below as a natural lead-in to additional content.\nButton   Card title With supporting text below as a natural lead-in to additional content.\nButton    View example's code      Using custom CSS Use custom CSS in your stylesheets or as inline styles to set a width.\nSpecial title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    View example's code      Text alignment You can quickly change the text alignment of any card—in its entirety or specific parts—with our text align classes.\nSpecial title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere   Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere   Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    View example's code      Navigation Add some navigation to a card\u0026rsquo;s header (or block) with Bootstrap\u0026rsquo;s nav components.\nActive  Link  Disabled    Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    View example's code      Active  Link  Disabled    Special title treatment With supporting text below as a natural lead-in to additional content.\nGo somewhere    View example's code      Images Cards include a few options for working with images. Choose from appending \u0026ldquo;image caps\u0026rdquo; at either end of a card, overlaying images with card content, or simply embedding the image in a card.\nImage caps Similar to headers and footers, cards can include top and bottom \u0026ldquo;image caps\u0026rdquo;—images at the top or bottom of a card.\nPlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\nLast updated 3 mins ago\n  Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\nLast updated 3 mins ago\n PlaceholderImage cap   View example's code      Image overlays Turn an image into a card background and overlay your card\u0026rsquo;s text. Depending on the image, you may or may not need additional styles or utilities.\nPlaceholderCard image Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\nLast updated 3 mins ago\n   View example's code      Note that content should not be larger than the height of the image. If content is larger than the image the content will be displayed outside the image.  Horizontal Using a combination of grid and utility classes, cards can be made horizontal in a mobile-friendly and responsive way. In the example below, we remove the grid gutters with .g-0 and use .col-md-* classes to make the card horizontal at the md breakpoint. Further adjustments may be needed depending on your card content.\nPlaceholderImage  Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\nLast updated 3 mins ago\n     View example's code      Card styles Cards include various options for customizing their backgrounds, borders, and color.\nBackground and color Added in v5.2.0 Set a background-color with contrasting foreground color with our .text-bg-{color} helpers. Previously it was required to manually pair your choice of .text-{color} and .bg-{color} utilities for styling, which you still may use if you prefer.\nHeader Primary card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Secondary card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Success card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Danger card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Warning card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Info card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Light card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Dark card title Some quick example text to build on the card title and make up the bulk of the card's content.\n   View example's code      Accessibility tip: Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the .visually-hidden class.  Border Use border utilities to change just the border-color of a card. Note that you can put .text-{color} classes on the parent .card or a subset of the card\u0026rsquo;s contents as shown below.\nHeader Primary card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Secondary card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Success card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Danger card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Warning card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Info card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Light card title Some quick example text to build on the card title and make up the bulk of the card's content.\n  Header Dark card title Some quick example text to build on the card title and make up the bulk of the card's content.\n   View example's code      Mixins utilities You can also change the borders on the card header and footer as needed, and even remove their background-color with .bg-transparent.\nHeader Success card title Some quick example text to build on the card title and make up the bulk of the card's content.\n Footer   View example's code      Card layout In addition to styling the content within cards, Bootstrap includes a few options for laying out series of cards. For the time being, these layout options are not yet responsive.\nCard groups Use card groups to render cards as a single, attached element with equal width and height columns. Card groups start off stacked and use display: flex; to become attached with uniform dimensions starting at the sm breakpoint.\nPlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\nLast updated 3 mins ago\n  PlaceholderImage cap Card title This card has supporting text below as a natural lead-in to additional content.\nLast updated 3 mins ago\n  PlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.\nLast updated 3 mins ago\n    View example's code      When using card groups with footers, their content will automatically line up.\nPlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n Last updated 3 mins ago   PlaceholderImage cap Card title This card has supporting text below as a natural lead-in to additional content.\n Last updated 3 mins ago   PlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.\n Last updated 3 mins ago     View example's code      Grid cards Use the Bootstrap grid system and its .row-cols classes to control how many grid columns (wrapped around your cards) you show per row. For example, here\u0026rsquo;s .row-cols-1 laying out the cards on one column, and .row-cols-md-2 splitting four cards to equal width across multiple rows, from the medium breakpoint up.\nPlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n     View example's code      Change it to .row-cols-3 and you\u0026rsquo;ll see the fourth card wrap.\nPlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n     View example's code      When you need equal height, add .h-100 to the cards. If you want equal heights by default, you can set $card-height: 100% in Sass.\nPlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n   PlaceholderImage cap Card title This is a short card.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content.\n   PlaceholderImage cap Card title This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n     View example's code      Just like with card groups, card footers will automatically line up.\nPlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\n Last updated 3 mins ago    PlaceholderImage cap Card title This card has supporting text below as a natural lead-in to additional content.\n Last updated 3 mins ago    PlaceholderImage cap Card title This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.\n Last updated 3 mins ago      View example's code      Masonry In v4 we used a CSS-only technique to mimic the behavior of Masonry-like columns, but this technique came with lots of unpleasant side effects. If you want to have this type of layout in v5, you can just make use of Masonry plugin. Masonry is not included in Bootstrap, but we\u0026rsquo;ve made a demo example to help you get started.\nCSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, cards now use local CSS variables on .card for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_card.scss     Sass variables src/assets/scss/_theme-variables.scss     ","description":"Bootstrap's cards provide a flexible and extensible content container with multiple variants and options.","permalink":"/docs/components/card.html","tags":null,"title":"Cards"},{"contents":"How it works   The carousel is a slideshow for cycling through a series of content, built with CSS 3D transforms and a bit of JavaScript. It works with a series of images, text, or custom markup. It also includes support for previous/next controls and indicators.\n  For performance reasons, carousels must be manually initialized using the carousel constructor method. Without initialization, some of the event listeners (specifically, the events needed touch/swipe support) will not be registered until a user has explicitly activated a control or indicator.\nThe only exception are autoplaying carousels with the data-bs-ride=\u0026quot;carousel\u0026quot; attribute as these are initialized automatically on page load. If you\u0026rsquo;re using autoplaying carousels with the data attribute, don\u0026rsquo;t explicitly initialize the same carousels with the constructor method.\n  Nested carousels are not supported. You should also be aware that carousels in general can often cause usability and accessibility challenges.\n  The animation effect of this component is dependent on the prefers-reduced-motion media query. See the reduced motion section of our accessibility documentation.  Basic examples Here is a basic example of a carousel with three slides. Note the previous/next controls. We recommend using \u0026lt;button\u0026gt; elements, but you can also use \u0026lt;a\u0026gt; elements with role=\u0026quot;button\u0026quot;.\nPlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      Carousels don\u0026rsquo;t automatically normalize slide dimensions. As such, you may need to use additional utilities or custom styles to appropriately size content. While carousels support previous/next controls and indicators, they\u0026rsquo;re not explicitly required. Add and customize as you see fit.\nYou must add the .active class to one of the slides, otherwise the carousel will not be visible. Also be sure to set a unique id on the .carousel for optional controls, especially if you\u0026rsquo;re using multiple carousels on a single page. Control and indicator elements must have a data-bs-target attribute (or href for links) that matches the id of the .carousel element.\nIndicators You can add indicators to the carousel, alongside the previous/next controls. The indicators let users jump directly to a particular slide.\n    PlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      Captions You can add captions to your slides with the .carousel-caption element within any .carousel-item. They can be easily hidden on smaller viewports, as shown below, with optional display utilities. We hide them initially with .d-none and bring them back on medium-sized devices with .d-md-block.\n    PlaceholderFirst slide First slide label Some representative placeholder content for the first slide.\n  PlaceholderSecond slide Second slide label Some representative placeholder content for the second slide.\n  PlaceholderThird slide Third slide label Some representative placeholder content for the third slide.\n    Previous   Next    View example's code      Crossfade Add .carousel-fade to your carousel to animate slides with a fade transition instead of a slide. Depending on your carousel content (e.g., text only slides), you may want to add .bg-body or some custom CSS to the .carousel-items for proper crossfading.\nPlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      Autoplaying carousels You can make your carousels autoplay on page load by setting the ride option to carousel. Autoplaying carousels automatically pause while hovered with the mouse. This behavior can be controlled with the pause option. In browsers that support the Page Visibility API, the carousel will stop cycling when the webpage is not visible to the user (such as when the browser tab is inactive, or when the browser window is minimized).\nFor accessibility reasons, we recommend avoiding the use of autoplaying carousels. If your page does include an autoplaying carousel, we recommend providing an additional button or control to explicitly pause/stop the carousel.\nSee WCAG 2.1 Success Criterion 2.2.2 Pause, Stop, Hide.\n PlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      When the ride option is set to true, rather than carousel, the carousel won\u0026rsquo;t automatically start to cycle on page load. Instead, it will only start after the first user interaction.\nPlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      Individual .carousel-item interval Add data-bs-interval=\u0026quot;\u0026quot; to a .carousel-item to change the amount of time to delay between automatically cycling to the next item.\nPlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      Autoplaying carousels without controls Here\u0026rsquo;s a carousel with slides only. Note the presence of the .d-block and .w-100 on carousel images to prevent browser default image alignment.\nPlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide     View example's code      Disable touch swiping Carousels support swiping left/right on touchscreen devices to move between slides. This can be disabled by setting the touch option to false.\nPlaceholderFirst slide  PlaceholderSecond slide  PlaceholderThird slide    Previous   Next    View example's code      Dark variant Add .carousel-dark to the .carousel for darker controls, indicators, and captions. Controls are inverted compared to their default white fill with the filter CSS property. Captions and controls have additional Sass variables that customize the color and background-color.\n Heads up! Dark variants for components were deprecated in v5.3.0 with the introduction of color modes. Instead of adding .carousel-dark, set data-bs-theme=\"dark\" on the root element, a parent wrapper, or the component itself.      PlaceholderFirst slide First slide label Some representative placeholder content for the first slide.\n  PlaceholderSecond slide Second slide label Some representative placeholder content for the second slide.\n  PlaceholderThird slide Third slide label Some representative placeholder content for the third slide.\n    Previous   Next    View example's code      Custom transition The transition duration of .carousel-item can be changed with the $carousel-transition-duration Sass variable before compiling or custom styles if you\u0026rsquo;re using the compiled CSS. If multiple transitions are applied, make sure the transform transition is defined first (e.g. transition: transform 2s ease, opacity .5s ease-out).\nCSS Sass variables Variables for all carousels:\nscss/bootstrap/_variables.scss     Variables for the dark carousel:\nscss/bootstrap/_variables.scss     Usage Via data attributes Use data attributes to easily control the position of the carousel. data-bs-slide accepts the keywords prev or next, which alters the slide position relative to its current position. Alternatively, use data-bs-slide-to to pass a raw slide index to the carousel data-bs-slide-to=\u0026quot;2\u0026quot;, which shifts the slide position to a particular index beginning with 0.\nVia JavaScript Call carousel manually with:\nOptions As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\u0026quot;{value}\u0026quot;. Make sure to change the case type of the option name from \u0026ldquo;camelCase\u0026rdquo; to \u0026ldquo;kebab-case\u0026rdquo; when passing the options via data attributes. For example, use data-bs-custom-class=\u0026quot;beautifier\u0026quot; instead of data-bs-customClass=\u0026quot;beautifier\u0026quot;.\nAs of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\u0026quot;delay\u0026quot;:0, \u0026quot;title\u0026quot;:123}' and data-bs-title=\u0026quot;456\u0026quot; attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\u0026quot;show\u0026quot;:0,\u0026quot;hide\u0026quot;:150}'.\n  Name Type Default Description     interval number 5000 The amount of time to delay between automatically cycling an item.   keyboard boolean true Whether the carousel should react to keyboard events.   pause string, boolean \u0026quot;hover\u0026quot; If set to \u0026quot;hover\u0026quot;, pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave. If set to false, hovering over the carousel won\u0026rsquo;t pause it. On touch-enabled devices, when set to \u0026quot;hover\u0026quot;, cycling will pause on touchend (once the user finished interacting with the carousel) for two intervals, before automatically resuming. This is in addition to the mouse behavior.   ride string, boolean false If set to true, autoplays the carousel after the user manually cycles the first item. If set to \u0026quot;carousel\u0026quot;, autoplays the carousel on load.   touch boolean true Whether the carousel should support left/right swipe interactions on touchscreen devices.   wrap boolean true Whether the carousel should cycle continuously or have hard stops.    Methods All API methods are asynchronous and start a transition. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. Learn more in our JavaScript docs.  You can create a carousel instance with the carousel constructor, and pass on any additional options. For example, to manually initialize an autoplaying carousel (assuming you\u0026rsquo;re not using the data-bs-ride=\u0026quot;carousel\u0026quot; attribute in the markup itself) with a specific interval and with touch support disabled, you can use:\n  Method Description     cycle Starts cycling through the carousel items from left to right.   dispose Destroys an element\u0026rsquo;s carousel. (Removes stored data on the DOM element)   getInstance Static method which allows you to get the carousel instance associated to a DOM element. You can use it like this: bootstrap.Carousel.getInstance(element).   getOrCreateInstance Static method which returns a carousel instance associated to a DOM element, or creates a new one in case it wasn\u0026rsquo;t initialized. You can use it like this: bootstrap.Carousel.getOrCreateInstance(element).   next Cycles to the next item. Returns to the caller before the next item has been shown (e.g., before the slid.bs.carousel event occurs).   nextWhenVisible Don\u0026rsquo;t cycle carousel to next when the page, the carousel, or the carousel\u0026rsquo;s parent aren\u0026rsquo;t visible. Returns to the caller before the target item has been shown.   pause Stops the carousel from cycling through items.   prev Cycles to the previous item. Returns to the caller before the previous item has been shown (e.g., before the slid.bs.carousel event occurs).   to Cycles the carousel to a particular frame (0 based, similar to an array). Returns to the caller before the target item has been shown (e.g., before the slid.bs.carousel event occurs).    Events Bootstrap\u0026rsquo;s carousel class exposes two events for hooking into carousel functionality. Both events have the following additional properties:\n direction: The direction in which the carousel is sliding (either \u0026quot;left\u0026quot; or \u0026quot;right\u0026quot;). relatedTarget: The DOM element that is being slid into place as the active item. from: The index of the current item to: The index of the next item  All carousel events are fired at the carousel itself (i.e. at the \u0026lt;div class=\u0026quot;carousel\u0026quot;\u0026gt;).\n  Event type Description     slid.bs.carousel Fired when the carousel has completed its slide transition.   slide.bs.carousel Fires immediately when the slide instance method is invoked.    ","description":"A slideshow component for cycling through elements—images or slides of text—like a carousel.","permalink":"/docs/components/carousel.html","tags":null,"title":"Carousel"},{"contents":"v1.3–\u0026nbsp; June 07, 2024  Fixed: issue zoom product gallery image  v1.2–\u0026nbsp; December 31, 2022  Bootstrap 5 is ready. Dashboard integration  v1.1–\u0026nbsp; June 13, 2022  Fix: Background Attachment Fixed in Safari browser Add: Home Page 11 Add: Home Page 12 Add: Home Page 13 Add: Home Page 14 Add: Home Page 15 Add: Home Page 16 Add: Home Page 17 Add: Home Page 18  v1.0–\u0026nbsp; December 14, 2021  Initial release ","description":null,"permalink":"/docs/usage/changelog.html","tags":null,"title":"Changelog"},{"contents":"Style 01          View example's code      ","description":null,"permalink":"/docs/components/client-logo.html","tags":null,"title":"Client Logo"},{"contents":"Colors Added in v5.3.0 Bootstrap\u0026rsquo;s color palette has continued to expand and become more nuanced in v5.3.0. We\u0026rsquo;ve added new variables for secondary and tertiary text and background colors, plus {color}-bg-subtle, {color}-border-subtle, and {color}-text-emphasis for our theme colors. These new colors are available through Sass and CSS variables (but not our color maps or utility classes) with the express goal of making it easier to customize across multiple colors modes like light and dark. These new variables are globally set on :root and are adapted for our new dark color mode while our original theme colors remain unchanged.\nColors ending in -rgb provide the red, green, blue values for use in rgb() and rgba() color modes. For example, rgba(var(--bs-secondary-bg-rgb), .5).\nHeads up! There\u0026rsquo;s some potential confusion with our new secondary and tertiary colors, and our existing secondary theme color, as well as our light and dark theme colors. Expect this to be ironed out in v6.    Description Swatch Variables     Body — Default foreground (color) and background, including components.  \u0026nbsp;   --bs-body-color\n--bs-body-color-rgb     \u0026nbsp;   --bs-body-bg\n--bs-body-bg-rgb    Secondary — Use the color option for lighter text. Use the bg option for dividers and to indicate disabled component states.  \u0026nbsp;   --bs-secondary-color\n--bs-secondary-color-rgb     \u0026nbsp;   --bs-secondary-bg\n--bs-secondary-bg-rgb    Tertiary — Use the color option for even lighter text. Use the bg option to style backgrounds for hover states, accents, and wells.  \u0026nbsp;   --bs-tertiary-color\n--bs-tertiary-color-rgb     \u0026nbsp;   --bs-tertiary-bg\n--bs-tertiary-bg-rgb     Emphasis — For higher contrast text. Not applicable for backgrounds.  \u0026nbsp;   --bs-emphasis-color\n--bs-emphasis-color-rgb     Border — For component borders, dividers, and rules. Use --bs-border-color-translucent to blend with backgrounds with an rgba() value.  \u0026nbsp;   --bs-border-color\n--bs-border-color-rgb    Primary — Main theme color, used for hyperlinks, focus styles, and component and form active states.  \u0026nbsp;   --bs-primary\n--bs-primary-rgb     \u0026nbsp;   --bs-primary-bg-subtle     \u0026nbsp;   --bs-primary-border-subtle     Text   --bs-primary-text-emphasis    Success — Theme color used for positive or successful actions and information.  \u0026nbsp;   --bs-success\n--bs-success-rgb     \u0026nbsp;   --bs-success-bg-subtle     \u0026nbsp;   --bs-success-border-subtle     Text   --bs-success-text-emphasis    Danger — Theme color used for errors and dangerous actions.  \u0026nbsp;   --bs-danger\n--bs-danger-rgb     \u0026nbsp;   --bs-danger-bg-subtle     \u0026nbsp;   --bs-danger-border-subtle     Text   --bs-danger-text-emphasis    Warning — Theme color used for non-destructive warning messages.  \u0026nbsp;   --bs-warning\n--bs-warning-rgb     \u0026nbsp;   --bs-warning-bg-subtle     \u0026nbsp;   --bs-warning-border-subtle     Text   --bs-warning-text-emphasis    Info — Theme color used for neutral and informative content.  \u0026nbsp;   --bs-info\n--bs-info-rgb     \u0026nbsp;   --bs-info-bg-subtle     \u0026nbsp;   --bs-info-border-subtle     Text   --bs-info-text-emphasis    Light — Additional theme option for less contrasting colors.  \u0026nbsp;   --bs-light\n--bs-light-rgb     \u0026nbsp;   --bs-light-bg-subtle     \u0026nbsp;   --bs-light-border-subtle     Text   --bs-light-text-emphasis    Dark — Additional theme option for higher contrasting colors.  \u0026nbsp;   --bs-dark\n--bs-dark-rgb     \u0026nbsp;   --bs-dark-bg-subtle     \u0026nbsp;   --bs-dark-border-subtle     Text   --bs-dark-text-emphasis     Using the new colors These new colors are accessible via CSS variables and utility classes—like --bs-primary-bg-subtle and .bg-primary-subtle—allowing you to compose your own CSS rules with the variables, or to quickly apply styles via classes. The utilities are built with the color\u0026rsquo;s associated CSS variables, and since we customize those CSS variables for dark mode, they are also adaptive to color mode by default.\nExample element with utilities   View example's code      Theme colors We use a subset of all colors to create a smaller color palette for generating color schemes, also available as Sass variables and a Sass map in Bootstrap\u0026rsquo;s src/assets/scss/_theme-variables.scss file.\n All these colors are available as a Sass map, $theme-colors.\nsrc/assets/scss/_theme-variables.scss     Check out our Sass maps and loops docs for how to modify these colors.\nAll colors All Bootstrap colors are available as Sass variables and a Sass map in src/assets/scss/_theme-variables.scss file. To avoid increased file sizes, we don\u0026rsquo;t create text or background color classes for each of these variables. Instead, we choose a subset of these colors for a theme palette.\nBe sure to monitor contrast ratios as you customize colors. As shown below, we\u0026rsquo;ve added three contrast ratios to each of the main colors—one for the swatch\u0026rsquo;s current colors, one for against white, and one for against black.\n$blue #0d6efd  $blue-100 $blue-200 $blue-300 $blue-400 $blue-500 $blue-600 $blue-700 $blue-800 $blue-900  $indigo #6610f2  $indigo-100 $indigo-200 $indigo-300 $indigo-400 $indigo-500 $indigo-600 $indigo-700 $indigo-800 $indigo-900  $purple #6f42c1  $purple-100 $purple-200 $purple-300 $purple-400 $purple-500 $purple-600 $purple-700 $purple-800 $purple-900  $pink #d63384  $pink-100 $pink-200 $pink-300 $pink-400 $pink-500 $pink-600 $pink-700 $pink-800 $pink-900  $red #dc3545  $red-100 $red-200 $red-300 $red-400 $red-500 $red-600 $red-700 $red-800 $red-900  $orange #fd7e14  $orange-100 $orange-200 $orange-300 $orange-400 $orange-500 $orange-600 $orange-700 $orange-800 $orange-900  $yellow #ffc107  $yellow-100 $yellow-200 $yellow-300 $yellow-400 $yellow-500 $yellow-600 $yellow-700 $yellow-800 $yellow-900  $green #198754  $green-100 $green-200 $green-300 $green-400 $green-500 $green-600 $green-700 $green-800 $green-900  $teal #20c997  $teal-100 $teal-200 $teal-300 $teal-400 $teal-500 $teal-600 $teal-700 $teal-800 $teal-900  $cyan #0dcaf0  $cyan-100 $cyan-200 $cyan-300 $cyan-400 $cyan-500 $cyan-600 $cyan-700 $cyan-800 $cyan-900  $gray-500 #adb5bd  $black #000  $white #fff    Notes on Sass Sass cannot programmatically generate variables, so we manually created variables for every tint and shade ourselves. We specify the midpoint value (e.g., $blue-500) and use custom color functions to tint (lighten) or shade (darken) our colors via Sass\u0026rsquo;s mix() color function.\nUsing mix() is not the same as lighten() and darken()—the former blends the specified color with white or black, while the latter only adjusts the lightness value of each color. The result is a much more complete suite of colors, as shown in this CodePen demo.\nOur tint-color() and shade-color() functions use mix() alongside our $theme-color-interval variable, which specifies a stepped percentage value for each mixed color we produce. See the scss/_functions.scss and src/assets/scss/_theme-variables.scss files for the full source code.\nColor Sass maps Bootstrap\u0026rsquo;s source Sass files include three maps to help you quickly and easily loop over a list of colors and their hex values.\n $colors lists all our available base (500) colors $theme-colors lists all semantically named theme colors (shown below) $grays lists all tints and shades of gray  Within src/assets/scss/_theme-variables.scss, you\u0026rsquo;ll find Bootstrap\u0026rsquo;s color variables and Sass map. Here\u0026rsquo;s an example of the $colors Sass map:\nsrc/assets/scss/_theme-variables.scss     Add, remove, or modify values within the map to update how they\u0026rsquo;re used in many other components. Unfortunately at this time, not every component utilizes this Sass map. Future updates will strive to improve upon this. Until then, plan on making use of the ${color} variables and this Sass map.\nExample Here\u0026rsquo;s how you can use these in your Sass:\nColor and background utility classes are also available for setting color and background-color using the 500 color values.\nGenerating utilities Added in v5.1.0 Bootstrap doesn\u0026rsquo;t include color and background-color utilities for every color variable, but you can generate these yourself with our utility API and our extended Sass maps added in v5.1.0.\n To start, make sure you\u0026rsquo;ve imported our functions, variables, mixins, and utilities. Use our map-merge-multiple() function to quickly merge multiple Sass maps together in a new map. Merge this new combined map to extend any utility with a {color}-{level} class name.  Here\u0026rsquo;s an example that generates text color utilities (e.g., .text-purple-500) using the above steps.\nThis will generate new .text-{color}-{level} utilities for every color and level. You can do the same for any other utility and property as well.\n","description":"Bootstrap is supported by an extensive color system that themes our styles and components. This enables more comprehensive customization and extension for any project.","permalink":"/docs/styleguide/colors.html","tags":null,"title":"Color"},{"contents":"Try it yourself! Download the source code and working demo for using Bootstrap with Stylelint, and the color modes from the twbs/examples repository. You can also open the example in StackBlitz.  Disable Dark Mode Dark mode is already activated. If you don\u0026rsquo;t want to use this feature. It can be turned off for HTML and SCSS below :\n HTML From parent directory Glowing. Go to file config.yaml. Find params \u0026raquo; enableDarkMode. Configuration is false. SCSS From parent directory Glowing/src/assets/scss. Go to file _theme-variables.scss. Find variable $enable-dark-mode . Configuration is false.  Dark mode Bootstrap now supports color modes, starting with dark mode! With v5.3.0 you can implement your own color mode toggler (see below for an example from Bootstrap\u0026rsquo;s docs) and apply the different color modes as you see fit. We support a light mode (default) and now dark mode. Color modes can be toggled globally on the \u0026lt;html\u0026gt; element, or on specific components and elements, thanks to the data-bs-theme attribute.\nAlternatively, you can also switch to a media query implementation thanks to our color mode mixin—see the usage section for details. Heads up though—this eliminates your ability to change themes on a per-component basis as shown below.\nExample For example, to change the color mode of a dropdown menu, add data-bs-theme=\u0026quot;light\u0026quot; or data-bs-theme=\u0026quot;dark\u0026quot; to the parent .dropdown. Now, no matter the global color mode, these dropdowns will display with the specified theme value.\nDefault dropdown  Action Action Another action Something else here  Separated link   Dark dropdown  Action Action Another action Something else here  Separated link    View example's code      How it works   As shown above, color mode styles are controlled by the data-bs-theme attribute. This attribute can be applied to the \u0026lt;html\u0026gt; element, or to any other element or Bootstrap component. If applied to the \u0026lt;html\u0026gt; element, it will apply to everything. If applied to a component or element, it will be scoped to that specific component or element.\n  For each color mode you wish to support, you\u0026rsquo;ll need to add new overrides for the shared global CSS variables. We do this already in our _root.scss stylesheet for dark mode, with light mode being the default values. In writing color mode specific styles, use the mixin:\n  We use a custom _variables-dark.scss to power those shared global CSS variable overrides for dark mode. This file isn\u0026rsquo;t required for your own custom color modes, but it\u0026rsquo;s required for our dark mode for two reasons. First, it\u0026rsquo;s better to have a single place to reset global colors. Second, some Sass variables had to be overridden for background images embedded in our CSS for accordions, form components, and more.\n  Usage Enable dark mode Enable the built in dark color mode across your entire project by adding the data-bs-theme=\u0026quot;dark\u0026quot; attribute to the \u0026lt;html\u0026gt; element. This will apply the dark color mode to all components and elements, other than those with a specific data-bs-theme attribute applied.\nBootstrap does not yet ship with a built-in color mode picker, but you can use the one from our own documentation if you like. Learn more in the JavaScript section.\nBuilding with Sass Our new dark mode option is available to use for all users of Bootstrap, but it\u0026rsquo;s controlled via data attributes instead of media queries and does not automatically toggle your project\u0026rsquo;s color mode. You can disable our dark mode entirely via Sass by changing $enable-dark-mode to false.\nWe use a custom Sass mixin, color-mode(), to help you control how color modes are applied. By default, we use a data attribute approach, allowing you to create more user-friendly experiences where your visitors can choose to have an automatic dark mode or control their preference (like in our own docs here). This is also an easy and scalable way to add different themes and more custom color modes beyond light and dark.\nIn case you want to use media queries and only make color modes automatic, you can change the mixin\u0026rsquo;s default type via Sass variable. Consider the following snippet and its compiled CSS output.\nOutputs to:\nAnd when setting to media-query:\nOutputs to:\nJavaScript To allow visitors or users to toggle color modes, you\u0026rsquo;ll need to create a toggle element to control the data-bs-theme attribute on the root element, \u0026lt;html\u0026gt;. We\u0026rsquo;ve built a toggler in our documentation that initially defers to a user\u0026rsquo;s current system color mode, but provides an option to override that and pick a specific color mode.\nHere\u0026rsquo;s a look at the JavaScript that powers it. Feel free to inspect our own documentation navbar to see how it\u0026rsquo;s implemented using HTML and CSS from our own components. It is suggested to include the JavaScript at the top of your page to reduce potential screen flickering during reloading of your site. Note that if you decide to use media queries for your color modes, your JavaScript may need to be modified or removed if you prefer an implicit control.\n    CSS Variables Dozens of root level CSS variables are repeated as overrides for dark mode. These are scoped to the color mode selector, which defaults to data-bs-theme but can be configured to use a prefers-color-scheme media query. Use these variables as a guideline for generating your own new color modes.\nscss/bootstrap/_root.scss     Sass variables CSS variables for our dark color mode are partially generated from dark mode specific Sass variables in _variables-dark.scss. This also includes some custom overrides for changing the colors of embedded SVGs used throughout our components.\nsrc/assets/scss/_theme-variables-dark.scss     Sass mixins Styles for dark mode, and any custom color modes you create, can be scoped appropriately to the data-bs-theme attribute selector or media query with the customizable color-mode() mixin. See the Sass usage section for more details.\nscss/bootstrap/mixins/_color-mode.scss     ","description":"Bootstrap now supports color modes, or themes, as of v5.3.0. Explore our default light color mode and the new dark mode, or create your own using our styles as your template.","permalink":"/docs/styleguide/color-modes.html","tags":null,"title":"Color modes"},{"contents":"Style 01   :   :   :      View example's code      ","description":null,"permalink":"/docs/components/countdown.html","tags":null,"title":"Countdown"},{"contents":"","description":"","permalink":"/docs/content-settings/create-page.html","tags":null,"title":"Create Page"},{"contents":"Framework   # Plugin Name Description     1 Bootstrap The most popular HTML, CSS, and JS library in the world.   2 jQuery jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.   3 jQuery Plugin - jquery.toc A lightweight, modular, JavaScript image and video lightbox gallery plugin.   4 Waypoints Waypoints is the easiest way to trigger a function when you scroll to an element.   5 Slick The last carousel you'll ever need.   6 Lightgallery A lightweight, modular, JavaScript image and video lightbox gallery plugin.   7 Isotope Filter \u0026 sort magical layouts.   8 Vanilla Lazyload LazyLoad is a fast, lightweight and flexible script that speeds up your web application by loading images only as they enter the viewport. LazyLoad supports responsive images.   9 Clipboard A modern approach to copy text to clipboard   10 Animate is a library of ready-to-use, cross-browser animations for use in your web projects.   11 Fuse Fuse.js is a powerful, lightweight fuzzy-search library, with zero dependencies.   12 Mapbox GL JS Mapbox GL JS is a client-side JavaScript library for building web maps and web applications with Mapbox's modern mapping technology.      Font   # Font Name Description     1 Butler Butler is a free serif typeface inspired by a mix between both Dala Floda \u0026 the amazing Bodoni family.   2 Tuesday Night Tuesday Night is a brand new free signature script from Font Forestry.   3 a Antara Distance A Antara Distance is a Free Font for commercial use created by wep.      ","description":"List of source links of Frameworks, Font used in Glowing","permalink":"/docs/usage/credits.html","tags":null,"title":"Credits"},{"contents":"Overview Dropdowns are toggleable, contextual overlays for displaying lists of links and more. They\u0026rsquo;re made interactive with the included Bootstrap dropdown JavaScript plugin. They\u0026rsquo;re toggled by clicking, not by hovering; this is an intentional design decision.\nDropdowns are built on a third party library, Popper, which provides dynamic positioning and viewport detection. Be sure to include popper.min.js before Bootstrap\u0026rsquo;s JavaScript or use bootstrap.bundle.min.js / bootstrap.bundle.js which contains Popper. Popper isn\u0026rsquo;t used to position dropdowns in navbars though as dynamic positioning isn\u0026rsquo;t required.\nAccessibility The WAI ARIA standard defines an actual role=\u0026quot;menu\u0026quot; widget, but this is specific to application-like menus which trigger actions or functions. ARIA menus can only contain menu items, checkbox menu items, radio button menu items, radio button groups, and sub-menus.\nBootstrap\u0026rsquo;s dropdowns, on the other hand, are designed to be generic and applicable to a variety of situations and markup structures. For instance, it is possible to create dropdowns that contain additional inputs and form controls, such as search fields or login forms. For this reason, Bootstrap does not expect (nor automatically add) any of the role and aria- attributes required for true ARIA menus. Authors will have to include these more specific attributes themselves.\nHowever, Bootstrap does add built-in support for most standard keyboard menu interactions, such as the ability to move through individual .dropdown-item elements using the cursor keys and close the menu with the Esc key.\nExamples Wrap the dropdown\u0026rsquo;s toggle (your button or link) and the dropdown menu within .dropdown, or another element that declares position: relative;. Ideally, you should use a \u0026lt;button\u0026gt; element as the dropdown trigger, but the plugin will work with \u0026lt;a\u0026gt; elements as well. The examples shown here use semantic \u0026lt;ul\u0026gt; elements where appropriate, but custom markup is supported.\nSingle button Any single .btn can be turned into a dropdown toggle with some markup changes. Here\u0026rsquo;s how you can put them to work with \u0026lt;button\u0026gt; elements:\nDropdown button  Action Another action Something else here    View example's code      While \u0026lt;button\u0026gt; is the recommended control for a dropdown toggle, there might be situations where you have to use an \u0026lt;a\u0026gt; element. If you do, we recommend adding a role=\u0026quot;button\u0026quot; attribute to appropriately convey control\u0026rsquo;s purpose to assistive technologies such as screen readers.\nDropdown link  Action Another action Something else here    View example's code      The best part is you can do this with any button variant, too:\nPrimary Action Another action Something else here  Separated link  Secondary Action Another action Something else here  Separated link  Success Action Another action Something else here  Separated link  Info Action Another action Something else here  Separated link  Warning Action Another action Something else here  Separated link  Danger Action Another action Something else here  Separated link   Split button Similarly, create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of .dropdown-toggle-split for proper spacing around the dropdown caret.\nWe use this extra class to reduce the horizontal padding on either side of the caret by 25% and remove the margin-left that\u0026rsquo;s added for regular button dropdowns. Those extra changes keep the caret centered in the split button and provide a more appropriately sized hit area next to the main button.\nPrimary Toggle Dropdown  Action Another action Something else here  Separated link  Secondary Toggle Dropdown  Action Another action Something else here  Separated link  Success Toggle Dropdown  Action Another action Something else here  Separated link  Info Toggle Dropdown  Action Another action Something else here  Separated link  Warning Toggle Dropdown  Action Another action Something else here  Separated link  Danger Toggle Dropdown  Action Another action Something else here  Separated link   Sizing Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\nLarge button  Action Another action Something else here  Separated link   Large split button Toggle Dropdown  Action Another action Something else here  Separated link    Small button  Action Another action Something else here  Separated link   Small split button Toggle Dropdown  Action Another action Something else here  Separated link    Dark dropdowns Deprecated in v5.3.0 Opt into darker dropdowns to match a dark navbar or custom style by adding .dropdown-menu-dark onto an existing .dropdown-menu. No changes are required to the dropdown items.\n Heads up! Dark variants for components were deprecated in v5.3.0 with the introduction of color modes. Instead of adding .dropdown-menu-dark, set data-bs-theme=\"dark\" on the root element, a parent wrapper, or the component itself.  Dropdown button  Action Another action Something else here  Separated link    View example's code      And putting it to use in a navbar:\nNavbar   Dropdown  Action Another action Something else here        View example's code      Directions Directions are flipped in RTL mode. As such, .dropstart will appear on the right side.  Centered Make the dropdown menu centered below the toggle with .dropdown-center on the parent element.\nCentered dropdown  Action Action two Action three    View example's code      Dropup Trigger dropdown menus above elements by adding .dropup to the parent element.\nDropup  Action Another action Something else here  Separated link   Split dropup  Toggle Dropdown  Action Another action Something else here  Separated link    Dropup centered Make the dropup menu centered above the toggle with .dropup-center on the parent element.\nCentered dropup  Action Action two Action three    View example's code      Dropend Trigger dropdown menus at the right of the elements by adding .dropend to the parent element.\nDropend  Action Another action Something else here  Separated link   Split dropend  Toggle Dropend  Action Another action Something else here  Separated link    Dropstart Trigger dropdown menus at the left of the elements by adding .dropstart to the parent element.\nDropstart  Action Another action Something else here  Separated link   Toggle Dropstart  Action Another action Something else here  Separated link  Split dropstart    Menu items You can use \u0026lt;a\u0026gt; or \u0026lt;button\u0026gt; elements as dropdown items.\nDropdown  Action Another action Something else here    View example's code      You can also create non-interactive dropdown items with .dropdown-item-text. Feel free to style further with custom CSS or text utilities.\nDropdown item text Action Another action Something else here   View example's code      Active Add .active to items in the dropdown to style them as active. To convey the active state to assistive technologies, use the aria-current attribute — using the page value for the current page, or true for the current item in a set.\nRegular link Active link Another link   View example's code      Disabled Add .disabled to items in the dropdown to style them as disabled.\nRegular link Disabled link Another link   View example's code      Menu alignment By default, a dropdown menu is automatically positioned 100% from the top and along the left side of its parent. You can change this with the directional .drop* classes, but you can also control them with additional modifier classes.\nAdd .dropdown-menu-end to a .dropdown-menu to right align the dropdown menu. Directions are mirrored when using Bootstrap in RTL, meaning .dropdown-menu-end will appear on the left side.\nHeads up! Dropdowns are positioned thanks to Popper except when they are contained in a navbar.  Right-aligned menu example  Action Another action Something else here    View example's code      Responsive alignment If you want to use responsive alignment, disable dynamic positioning by adding the data-bs-display=\u0026quot;static\u0026quot; attribute and use the responsive variation classes.\nTo align right the dropdown menu with the given breakpoint or larger, add .dropdown-menu{-sm|-md|-lg|-xl|-xxl}-end.\nLeft-aligned but right aligned when large screen  Action Another action Something else here    View example's code      To align left the dropdown menu with the given breakpoint or larger, add .dropdown-menu-end and .dropdown-menu{-sm|-md|-lg|-xl|-xxl}-start.\nRight-aligned but left aligned when large screen  Action Another action Something else here    View example's code      Note that you don\u0026rsquo;t need to add a data-bs-display=\u0026quot;static\u0026quot; attribute to dropdown buttons in navbars, since Popper isn\u0026rsquo;t used in navbars.\nAlignment options Taking most of the options shown above, here\u0026rsquo;s a small kitchen sink demo of various dropdown alignment options in one place.\nDropdown  Menu item Menu item Menu item   Right-aligned menu  Menu item Menu item Menu item   Left-aligned, right-aligned lg  Menu item Menu item Menu item   Right-aligned, left-aligned lg  Menu item Menu item Menu item   Dropstart  Menu item Menu item Menu item   Dropend  Menu item Menu item Menu item   Dropup  Menu item Menu item Menu item    View example's code      Menu content Headers Add a header to label sections of actions in any dropdown menu.\nDropdown header Action Another action   View example's code      Dividers Separate groups of related menu items with a divider.\nAction Another action Something else here  Separated link   View example's code      Text Place any freeform text within a dropdown menu with text and use spacing utilities. Note that you\u0026rsquo;ll likely need additional sizing styles to constrain the menu width.\n Some example text that's free-flowing within the dropdown menu. And this is more example text.   View example's code      Forms Put a form within a dropdown menu, or make it into a dropdown menu, and use margin or padding utilities to give it the negative space you require.\nEmail address  Password  Remember me    Sign in   New around here? Sign up Forgot password?   View example's code      Dropdown form  Email address  Password  Remember me    Sign in    View example's code      Dropdown options Use data-bs-offset or data-bs-reference to change the location of the dropdown.\nOffset  Action Another action Something else here   Reference Toggle Dropdown  Action Another action Something else here  Separated link     View example's code      Auto close behavior By default, the dropdown menu is closed when clicking inside or outside the dropdown menu. You can use the autoClose option to change this behavior of the dropdown.\nDefault dropdown  Menu item Menu item Menu item   Clickable inside  Menu item Menu item Menu item   Clickable outside  Menu item Menu item Menu item   Manual close  Menu item Menu item Menu item    View example's code      CSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, dropdowns now use local CSS variables on .dropdown-menu for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_dropdown.scss     Dropdown items include at least one variable that is not set on .dropdown. This allows you to provide a new value while Bootstrap defaults to a fallback value.\n --bs-dropdown-item-border-radius   Customization through CSS variables can be seen on the .dropdown-menu-dark class where we override specific values without adding duplicate CSS selectors.\nscss/bootstrap/_dropdown.scss     Sass variables Variables for all dropdowns:\nscss/bootstrap/_variables.scss     Variables for the dark dropdown:\nscss/bootstrap/_variables.scss     Variables for the CSS-based carets that indicate a dropdown\u0026rsquo;s interactivity:\nscss/bootstrap/_variables.scss     Mixins Mixins are used to generate the CSS-based carets and can be found in scss/bootstrap/mixins/_caret.scss.\nscss/bootstrap/mixins/_caret.scss     Usage Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the .show class on the parent .dropdown-menu. The data-bs-toggle=\u0026quot;dropdown\u0026quot; attribute is relied on for closing dropdown menus at an application level, so it\u0026rsquo;s a good idea to always use it.\nOn touch-enabled devices, opening a dropdown adds empty mouseover handlers to the immediate children of the \u0026lt;body\u0026gt; element. This admittedly ugly hack is necessary to work around a quirk in iOS\u0026rsquo; event delegation, which would otherwise prevent a tap anywhere outside of the dropdown from triggering the code that closes the dropdown. Once the dropdown is closed, these additional empty mouseover handlers are removed.  Via data attributes Add data-bs-toggle=\u0026quot;dropdown\u0026quot; to a link or button to toggle a dropdown.\nVia JavaScript Dropdowns must have data-bs-toggle=\u0026quot;dropdown\u0026quot; on their trigger element, regardless of whether you call your dropdown via JavaScript or use the data-api.  Call the dropdowns via JavaScript:\nOptions As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\u0026quot;{value}\u0026quot;. Make sure to change the case type of the option name from \u0026ldquo;camelCase\u0026rdquo; to \u0026ldquo;kebab-case\u0026rdquo; when passing the options via data attributes. For example, use data-bs-custom-class=\u0026quot;beautifier\u0026quot; instead of data-bs-customClass=\u0026quot;beautifier\u0026quot;.\nAs of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\u0026quot;delay\u0026quot;:0, \u0026quot;title\u0026quot;:123}' and data-bs-title=\u0026quot;456\u0026quot; attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\u0026quot;show\u0026quot;:0,\u0026quot;hide\u0026quot;:150}'.\n  Name Type Default Description     autoClose boolean, string true Configure the auto close behavior of the dropdown: true - the dropdown will be closed by clicking outside or inside the dropdown menu.false - the dropdown will be closed by clicking the toggle button and manually calling hide or toggle method. (Also will not be closed by pressing Esc key)'inside' - the dropdown will be closed (only) by clicking inside the dropdown menu. 'outside' - the dropdown will be closed (only) by clicking outside the dropdown menu. Note: the dropdown can always be closed with the Esc key.   boundary string, element 'clippingParents' Overflow constraint boundary of the dropdown menu (applies only to Popper\u0026rsquo;s preventOverflow modifier). By default it\u0026rsquo;s clippingParents and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper\u0026rsquo;s detectOverflow docs.   display string 'dynamic' By default, we use Popper for dynamic positioning. Disable this with static.   offset array, string, function [0, 2] Offset of the dropdown relative to its target. You can pass a string in data attributes with comma separated values like: data-bs-offset=\u0026quot;10,20\u0026quot;. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: skidding, distance. For more information refer to Popper\u0026rsquo;s offset docs.   popperConfig null, object, function null To change Bootstrap\u0026rsquo;s default Popper config, see Popper\u0026rsquo;s configuration. When a function is used to create the Popper configuration, it\u0026rsquo;s called with an object that contains the Bootstrap\u0026rsquo;s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.   reference string, element, object 'toggle' Reference element of the dropdown menu. Accepts the values of 'toggle', 'parent', an HTMLElement reference or an object providing getBoundingClientRect. For more information refer to Popper\u0026rsquo;s constructor docs and virtual element docs.    Using function with popperConfig Methods   Method Description     dispose Destroys an element\u0026rsquo;s dropdown. (Removes stored data on the DOM element)   getInstance Static method which allows you to get the dropdown instance associated to a DOM element, you can use it like this: bootstrap.Dropdown.getInstance(element).   getOrCreateInstance Static method which returns a dropdown instance associated to a DOM element or create a new one in case it wasn\u0026rsquo;t initialized. You can use it like this: bootstrap.Dropdown.getOrCreateInstance(element).   hide Hides the dropdown menu of a given navbar or tabbed navigation.   show Shows the dropdown menu of a given navbar or tabbed navigation.   toggle Toggles the dropdown menu of a given navbar or tabbed navigation.   update Updates the position of an element\u0026rsquo;s dropdown.    Events All dropdown events are fired at the toggling element and then bubbled up. So you can also add event listeners on the .dropdown-menu\u0026rsquo;s parent element. hide.bs.dropdown and hidden.bs.dropdown events have a clickEvent property (only when the original Event type is click) that contains an Event Object for the click event.\n  Event type Description     hide.bs.dropdown Fires immediately when the hide instance method has been called.   hidden.bs.dropdown Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.   show.bs.dropdown Fires immediately when the show instance method is called.   shown.bs.dropdown Fired when the dropdown has been made visible to the user and CSS transitions have completed.    ","description":"Toggle contextual overlays for displaying lists of links and more with the Bootstrap dropdown plugin.","permalink":"/docs/components/dropdowns.html","tags":null,"title":"Dropdowns"},{"contents":"Anytime you need to display a piece of content—like an image with an optional caption, consider using a \u0026lt;figure\u0026gt;.\nUse the included .figure, .figure-img and .figure-caption classes to provide some baseline styles for the HTML5 \u0026lt;figure\u0026gt; and \u0026lt;figcaption\u0026gt; elements. Images in figures have no explicit size, so be sure to add the .img-fluid class to your \u0026lt;img\u0026gt; to make it responsive.\nPlaceholder400x300 A caption for the above image.   View example's code      Aligning the figure\u0026rsquo;s caption is easy with our text utilities.\nPlaceholder400x300 A caption for the above image.   View example's code      CSS Sass variables src/assets/scss/_theme-variables.scss     ","description":"Documentation and examples for displaying related images and text with the figure component in Bootstrap.","permalink":"/docs/content/figures.html","tags":null,"title":"Figures"},{"contents":"Font Options Urbanist : Home 01 Home 01 Home 02 Home 03 Home 04 Home 05 Home 06 Home 07 Home 08  Tuesday Night : Home 09 Home 10  Butler : Home 11 Home 12 Home 13  a Antara Distance : Home 14 Home 15 Home 16    ","description":"Use one of the existing font options or a custom font of your choice to change the overall font in Glowing.","permalink":"/docs/styleguide/fonts.html","tags":null,"title":"Font"},{"contents":"Prologue Glowing is using icons from Font Awesome library 6th edition. Below you can find the icon font icon list. All these retina ready icons can be easily styled to color, size, shadow and anything is possible with CSS. For more information,Find more icons please visit Fontawesome website\n arrow-down    arrow-down-1-9    arrow-down-9-1    arrow-down-a-z    arrow-down-short-wide    arrow-left    arrow-right    arrow-pointer    arrow-right-arrow-left    arrow-trend-down    arrow-trend-up    arrow-turn-down    Brand Logos  google    bandcamp    reddit    wordpress    yahoo    html5    css3    font-awesome    digg    envelope    facebook    google-plus-g    Business  briefcase    business-time    user-tie    bullseye    chart-line    bullhorn    fax    address-card    bars-progress    bars-staggered    calculator    calendar-days    Chat  rocketchat    comment-medical    comment    comment-dots    comment-sms    comments    headset    message    comment-slash    whatsapp    square-whatsapp    snapchat    Cloud and Web  cloud    cloud-arrow-down    cloud-arrow-up    cloud-bolt    soundcloud    cloudscale    mixcloud    server    sitemap    network-wired    circle-nodes    ethernet    Communication  tower-cell    tty    mobile    mobile-button    mobile-retro    mobile-screen    mobile-screen-button    envelope    envelope-circle-check    phone-flip    mill-sign    truck-fast    Construction  helmet-safety    person-digging    trowel    trowel-bricks    brush    bucket    compass-drafting    hammer    paint-roller    ruler-combined    ruler-horizontal    ruler-vertical    Content  arrows-to-circle    copy    copyright    clipboard    clone    file-import    print    registered    trademark    border-all    table-cells-large    grip    Design Tools  crop    crop-simple    marker    ruler    droplet    font-awesome    layer-group    copy    wand-magic-sparkles    figma    palette    eye    Devices  desktop    house-laptop    tablet-screen-button    mobile-screen    computer-mouse    download    keyboard    plug    floppy-disk    tv    upload    headphones    Emoji  face-grin-wink    face-grin-squint    face-grin-stars    face-smile-beam    face-smile-wink    face-tired    face-grin-hearts    face-frown    face-flushed    face-rolling-eyes    face-sad-cry    face-angry    Security  lock    lock-open    fingerprint    shield-halved    eye    eye-slash    key    shield-heart    file-shield    ban    user-lock    user-shield    Shopping  bag-shopping    basket-shopping    tag    tags    barcode    amazon-pay    truck-fast    truck    bookmark    btc    store-slash    heart    Users  user    users    user-check    user-clock    user-secret    user-slash    user-tag    users-between-lines    circle-user    person-running    person-shelter    person-skating    ","description":"Font Awesome is the Internet's icon library and toolkit, used by millions of designers, developers, and content creators.","permalink":"/docs/styleguide/font-icons.html","tags":null,"title":"Font Awesome"},{"contents":"Form Control Example Form controls are styled with a mix of Sass and CSS variables, allowing them to adapt to color modes and support any customization method.\nEmail address  Example textarea    View example's code      Sizing Set heights using classes like .form-control-lg and .form-control-sm.\n View example's code      Form text Block-level or inline-level form text can be created using .form-text.\nForm text should be explicitly associated with the form control it relates to using the aria-labelledby (for mandatory information such as data format) or aria-describedby (for complementary information) attribute. This will ensure that assistive technologies—such as screen readers—will announce this form text when the user focuses or enters the control.  Form text below inputs can be styled with .form-text. If a block-level element will be used, a top margin is added for easy spacing from the inputs above.\nPassword Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.   View example's code      Inline text can use any typical inline HTML element (be it a \u0026lt;span\u0026gt;, \u0026lt;small\u0026gt;, or something else) with nothing more than the .form-text class.\nPassword   Must be 8-20 characters long.     View example's code      Disabled Add the disabled boolean attribute on an input to give it a grayed out appearance, remove pointer events, and prevent focusing.\n View example's code      Readonly Add the readonly boolean attribute on an input to prevent modification of the input\u0026rsquo;s value. readonly inputs can still be focused and selected, while disabled inputs cannot.\n View example's code      Readonly plain text If you want to have \u0026lt;input readonly\u0026gt; elements in your form styled as plain text, replace .form-control with .form-control-plaintext to remove the default form field styling and preserve the correct margin and padding.\nEmail   Password    View example's code      Email  Password  Confirm identity    View example's code      File input Default file input example  Multiple files input example  Disabled file input example  Small file input example   Large file input example   View example's code      Color Set the type=\u0026quot;color\u0026quot; and add .form-control-color to the \u0026lt;input\u0026gt;. We use the modifier class to set fixed heights and override some inconsistencies between browsers.\nColor picker  View example's code      Datalists Datalists allow you to create a group of \u0026lt;option\u0026gt;s that can be accessed (and autocompleted) from within an \u0026lt;input\u0026gt;. These are similar to \u0026lt;select\u0026gt; elements, but come with more menu styling limitations and differences. While most browsers and operating systems include some support for \u0026lt;datalist\u0026gt; elements, their styling is inconsistent at best.\nLearn more about support for datalist elements.\nDatalist example   View example's code      CSS Sass variables $input-* are shared across most of our form controls (and not buttons).\nsrc/assets/scss/_theme-variables.scss     $form-label-* and $form-text-* are for our \u0026lt;label\u0026gt;s and .form-text component.\nsrc/assets/scss/_theme-variables.scss     src/assets/scss/_theme-variables.scss     $form-file-* are for file input.\nsrc/assets/scss/_theme-variables.scss     ","description":"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.","permalink":"/docs/components/form-elements.html","tags":null,"title":"Forms"},{"contents":"Quick start This guide will help you get started with Glowing. All the information regarding file structure, build tools, components, credits, license and FAQ can be found here.\nIf you have any questions that are beyond the scope of this help document, please create a ticket on our support page.\nContact FormSupport Page\nPlease remember\u0026hellip;\n Requests sent during weekends or on holidays will be replied on business days. We only provide support for the issues related to the features that are included in the template. Debugging or providing guides on how to make custom modifications are not part of our support. Thank you for understanding.   File Structure Once downloaded, unzip the compressed folder and you\u0026rsquo;ll see something like this:\ndist All template distribution files like HTML / CSS / JS that have been processed (compiled / minified) from src folder using Node.js / Hugo. scss/bootstrap Contains all .scss file of bootstrap framework src All template source files like HTML / SCSS / CSS / JS that are then processed (compiled / minified) to dist folder.  src/assets/js Contains project JS files that are processed (compiled / minified) to dist/assets/js/theme.min.js. src/assets/scss Contains all project SCSS files that are compiled and minified in dist/assets/css folder. src/data This directory is used to store configuration files that can be used by Hugo when generating your website. You can write these files in YAML, JSON, or TOML format. In addition to the files you add to this folder, you can also create data templates that pull from dynamic content. src/layouts Stores templates in the form of .html files that specify how views of your content will be rendered into a static website. src/static Stores all the static content: images, CSS, JavaScript, etc. When Hugo builds your site, all assets inside your static directory are copied over as-is.   dist/docs Contain all documentation files (installation, blocks, elements, etc.) regarding the template. You can also reach the documentation from the live demo as well. package.json Includes the list of dependencies to install from npm. config.yaml Hugo uses the config.toml, config.yaml, or config.json (if found in the site root) as the default site config file. Learn more about it from Working with Hugo section or Hugo documentation.  Installation This step is optional. It aims at advanced user who wants to speed up the development process with a professional grade Front-End toolset shipped with GoHugo. If you are not familiar with these tools and have no time to dive in you can still use plain HTML / CSS / JS to customize GoHugo. Files you need are located inside dist folder. In this case, you can skip this and the next sections. Happy coding :)  If you\u0026rsquo;d like to speed up development process with Node.js / Hugo / SASS, then follow these steps:\n1. Install Node.js if you don’t have it yet. 2. Unzip the template package and in the root project folder Glowing, go to your command line and run npm install. This will install the npm packages listed in the package.json file. 3. You should now have the project files set up and all the npm packages installed.  Hugo Commands Speed up your workflow with commands You can see more here https://gohugo.io/commands/\n hugo [flags] hugo builds your site. hugo mod clean [flags] Delete the Hugo Module cache for the current project. hugo version [flags] Print the version number of Hugo. hugo new site [path] [flags] Create a new site (skeleton). hugo server [flags] A high performance webserver. hugo mod npm [flags] Various npm (Node package manager) helpers. hugo mod npm pack [flags] Experimental: Prepares and writes a composite package.json file for your project.  ","description":"Guide to get started with Glowing Modern \u0026 Multipurpose Bootstrap 5 Template.","permalink":"/docs/usage/getting-started.html","tags":null,"title":"Getting Started"},{"contents":"Style 01 Glowing\nShop by Categories Our products are designed for everyone.\n  View example's code      Style 01 Align Left Glowing\nShop by Categories Our products are designed for everyone.\n  View example's code      Style 02 Glowing Beauty\nOUR PRODUCTS\nBecause You Need Time for Yourself. Blend Beauty in You   View example's code      ","description":null,"permalink":"/docs/components/heading.html","tags":null,"title":"Heading"},{"contents":"Style 01   Free Shipping Free Shipping for orders over $130\n    View example's code      Style 02     Address 3245 Abbot Kinney BLVD – PH Venice, CA 124\n76 East Houston Street PH Venice, CA 124\n Get Direction     View example's code      ","description":null,"permalink":"/docs/components/icon-box.html","tags":null,"title":"Icon Box"},{"contents":"Style 01  Moisturizers 12       View example's code      Style 02  Guaranteed PURE All Grace formulations adhere to strict purity standards and will never contain harsh or toxic ingredients\n    View example's code      Style 03   Guaranteed PURE  All Grace formulations adhere to strict purity standards and will never contain harsh or toxic ingredients\n    View example's code      Style 04      View example's code      Style 05  Hot Product shroom serum Lorem ipsum dolor sit amet, consectetur adipi, scing seddo eiusmod temporincididunt ut labore et dolore magna aliqua.\nShop Now        View example's code      Style 06  Because You Need Time for Yourself. Blend Beauty in You  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur\nShop Now     View example's code      ","description":null,"permalink":"/docs/components/image-box.html","tags":null,"title":"Image Box"},{"contents":"Responsive images Images in Bootstrap are made responsive with .img-fluid. This applies max-width: 100%; and height: auto; to the image so that it scales with the parent width.\nPlaceholderResponsive image  View example's code      Image thumbnails In addition to our border-radius utilities, you can use .img-thumbnail to give an image a rounded 1px border appearance.\nA generic square placeholder image with a white border around it, making it resemble a photograph taken with an old instant camera200x200  View example's code      Aligning images Align images with the helper float classes or text alignment classes. block-level images can be centered using the .mx-auto margin utility class.\nPlaceholder200x200 Placeholder200x200  View example's code      Placeholder200x200  View example's code      Placeholder200x200   View example's code      Picture If you are using the \u0026lt;picture\u0026gt; element to specify multiple \u0026lt;source\u0026gt; elements for a specific \u0026lt;img\u0026gt;, make sure to add the .img-* classes to the \u0026lt;img\u0026gt; and not to the \u0026lt;picture\u0026gt; tag.\nSass Variables Variables are available for image thumbnails.\nsrc/assets/scss/_theme-variables.scss     ","description":"Documentation and examples for opting images into responsive behavior (so they never become wider than their parent) and add lightweight styles to them—all via classes.","permalink":"/docs/content/images.html","tags":null,"title":"Images"},{"contents":"Style 01                      View example's code      ","description":null,"permalink":"/docs/components/instagram.html","tags":null,"title":"Instagram"},{"contents":"Style Light    View example's code      Style Dark    View example's code      Style Navigation Night    View example's code      Style Outdoors    View example's code      Style Satellite Streets    View example's code      ","description":null,"permalink":"/docs/components/map.html","tags":null,"title":"Map"},{"contents":"Spacing Spacing utilities are declared via Sass map and then generated with our utilities API.\nGlowing adds additional spacing variables to existing Bootstrap spacing ranging between values 0 and 25   Font Size Quickly change the font-size of text. While our heading classes (e.g., .h1–.h6) apply font-size, font-weight, and line-height, these utilities only apply font-size. Sizing for these utilities matches HTML’s heading elements, so asthe number increases, their size decreases.\nCustomize your available font-sizes by modifying the $font-sizes Sass map. .fs-1 text\n.fs-2 text\n.fs-3 text\n.fs-4 text\n.fs-5 text\n.fs-6 text\n View example's code      Line Height Change the line height with .lh-* utilities.  View example\u0026#39;s code        Letter Spacing Change the letter spacing with .ls-* utilities.  View example\u0026#39;s code        Gutters Spacing variables mentioned above can also be used for column gutters. More information regarding Bootstrap gutters can be found on Bootstrap docs\n  ","description":"Learn more about some miscellaneous styling features used in Glowing.","permalink":"/docs/styleguide/misc.html","tags":null,"title":"Misc"},{"contents":"How it works Before getting started with Bootstrap\u0026rsquo;s modal component, be sure to read the following as our menu options have recently changed.\n Modals are built with HTML, CSS, and JavaScript. They\u0026rsquo;re positioned over everything else in the document and remove scroll from the \u0026lt;body\u0026gt; so that modal content scrolls instead. Clicking on the modal \u0026ldquo;backdrop\u0026rdquo; will automatically close the modal. Bootstrap only supports one modal window at a time. Nested modals aren\u0026rsquo;t supported as we believe them to be poor user experiences. Modals use position: fixed, which can sometimes be a bit particular about its rendering. Whenever possible, place your modal HTML in a top-level position to avoid potential interference from other elements. You\u0026rsquo;ll likely run into issues when nesting a .modal within another fixed element. Once again, due to position: fixed, there are some caveats with using modals on mobile devices. See our browser support docs for details. Due to how HTML5 defines its semantics, the autofocus HTML attribute has no effect in Bootstrap modals. To achieve the same effect, use some custom JavaScript:  The animation effect of this component is dependent on the prefers-reduced-motion media query. See the reduced motion section of our accessibility documentation.  Keep reading for demos and usage guidelines.\nExamples Modal components Below is a static modal example (meaning its position and display have been overridden). Included are the modal header, modal body (required for padding), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action.\nModal title   Modal body text goes here.\n Close Save changes      In the above static example, we use \u0026lt;h5\u0026gt;, to avoid issues with the heading hierarchy in the documentation page. Structurally, however, a modal dialog represents its own separate document/context, so the .modal-title should ideally be an \u0026lt;h1\u0026gt;. If necessary, you can use the font size utilities to control the heading\u0026rsquo;s appearance. All the following live examples use this approach.  Live demo Toggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page.\nModal title   Woo-hoo, you're reading this text in a modal!\n Close Save changes     Launch demo modal   Static backdrop When backdrop is set to static, the modal will not close when clicking outside of it. Click the button below to try it.\nModal title   I will not close if you click outside of me. Don't even try to press escape key.\n Close Understood     Launch static backdrop modal   Scrolling long content When modals become too long for the user\u0026rsquo;s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.\nModal title   This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text the modal, we use an inline style set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.\n Close Save changes     Launch demo modal   You can also create a scrollable modal that allows scroll the modal body by adding .modal-dialog-scrollable to .modal-dialog.\nModal title   This is some placeholder content to show the scrolling behavior for modals. We use repeated line breaks to demonstrate how content can exceed minimum inner height, thereby showing inner scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.\nThis content should appear at the bottom after you scroll.\n Close Save changes     Launch demo modal   Vertically centered Add .modal-dialog-centered to .modal-dialog to vertically center the modal.\nModal title   This is a vertically centered modal.\n Close Save changes     Modal title   This is some placeholder content to show a vertically centered modal. We've added some extra copy here to show how vertically centering the modal works when combined with scrollable modals. We also use some repeated line breaks to quickly extend the height of the content, thereby triggering the scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.\nJust like that.\n Close Save changes     Vertically centered modal  Vertically centered scrollable modal   Tooltips and popovers Tooltips and popovers can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed.\nModal title   Popover in a modal This button triggers a popover on click.\n Tooltips in a modal This link and that link have tooltips on hover.\n Close Save changes     Launch demo modal   Using the grid Utilize the Bootstrap grid system within a modal by nesting .container-fluid within the .modal-body. Then, use the normal grid system classes as you would anywhere else.\nGrids in modals   .col-md-4 .col-md-4 .ms-auto  .col-md-3 .ms-auto .col-md-2 .ms-auto  .col-md-6 .ms-auto  Level 1: .col-sm-9 Level 2: .col-8 .col-sm-6  Level 2: .col-4 .col-sm-6       Close Save changes     Launch demo modal   Varying modal content Have a bunch of buttons that all trigger the same modal with slightly different contents? Use event.relatedTarget and HTML data-bs-* attributes to vary the contents of the modal depending on which button was clicked.\nBelow is a live demo followed by example HTML and JavaScript. For more information, read the modal events docs for details on relatedTarget.\nOpen modal for @mdo Open modal for @fat Open modal for @getbootstrap New message    Recipient:  Message:     Close Send message      View example's code      Toggle between modals Toggle between multiple modals with some clever placement of the data-bs-target and data-bs-toggle attributes. For example, you could toggle a password reset modal from within an already open sign in modal. Please note multiple modals cannot be open at the same time—this method simply toggles between two separate modals.\nModal 1   Show a second modal and hide this one with the button below.  Open second modal     Modal 2   Hide this modal and show the first with the button below.  Back to first     Open first modal  View example's code      Change animation The $modal-fade-transform variable determines the transform state of .modal-dialog before the modal fade-in animation, the $modal-show-transform variable determines the transform of .modal-dialog at the end of the modal fade-in animation.\nIf you want for example a zoom-in animation, you can set $modal-fade-transform: scale(.8).\nRemove animation For modals that simply appear rather than fade in to view, remove the .fade class from your modal markup.\nDynamic heights If the height of a modal changes while it is open, you should call myModal.handleUpdate() to readjust the modal\u0026rsquo;s position in case a scrollbar appears.\nAccessibility Be sure to add aria-labelledby=\u0026quot;...\u0026quot;, referencing the modal title, to .modal. Additionally, you may give a description of your modal dialog with aria-describedby on .modal. Note that you don\u0026rsquo;t need to add role=\u0026quot;dialog\u0026quot; since we already add it via JavaScript.\nEmbedding YouTube videos Embedding YouTube videos in modals requires additional JavaScript not in Bootstrap to automatically stop playback and more. See this helpful Stack Overflow post for more information.\nOptional sizes Modals have three optional sizes, available via modifier classes to be placed on a .modal-dialog. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.\n  Size Class Modal max-width     Small .modal-sm 300px   Default None 500px   Large .modal-lg 800px   Extra large .modal-xl 1140px    Our default modal without modifier class constitutes the \u0026ldquo;medium\u0026rdquo; size modal.\nExtra large modal Large modal Small modal  Extra large modal   ...     Large modal   ...     Small modal   ...     Fullscreen Modal Another override is the option to pop up a modal that covers the user viewport, available via modifier classes that are placed on a .modal-dialog.\n  Class Availability      .modal-fullscreen Always    .modal-fullscreen-sm-down 576px    .modal-fullscreen-md-down 768px    .modal-fullscreen-lg-down 992px    .modal-fullscreen-xl-down 1200px    .modal-fullscreen-xxl-down 1400px     Full screen Full screen below sm Full screen below md Full screen below lg Full screen below xl Full screen below xxl  Full screen modal   ...  Close     Full screen below sm   ...  Close     Full screen below md   ...  Close     Full screen below lg   ...  Close     Full screen below xl   ...  Close     Full screen below xxl   ...  Close     CSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, modals now use local CSS variables on .modal and .modal-backdrop for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_modal.scss     scss/bootstrap/_modal.scss     Sass variables scss/bootstrap/_variables.scss     Loop Responsive fullscreen modals are generated via the $breakpoints map and a loop in scss/_modal.scss.\nscss/bootstrap/_modal.scss     Usage The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also overrides default scrolling behavior and generates a .modal-backdrop to provide a click area for dismissing shown modals when clicking outside the modal.\nVia data attributes Toggle Activate a modal without writing JavaScript. Set data-bs-toggle=\u0026quot;modal\u0026quot; on a controller element, like a button, along with a data-bs-target=\u0026quot;#foo\u0026quot; or href=\u0026quot;#foo\u0026quot; to target a specific modal to toggle.\nDismiss While both ways to dismiss a modal are supported, keep in mind that dismissing from outside a modal does not match the ARIA Authoring Practices Guide dialog (modal) pattern. Do this at your own risk.  Via JavaScript Create a modal with a single line of JavaScript:\nOptions As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\u0026quot;{value}\u0026quot;. Make sure to change the case type of the option name from \u0026ldquo;camelCase\u0026rdquo; to \u0026ldquo;kebab-case\u0026rdquo; when passing the options via data attributes. For example, use data-bs-custom-class=\u0026quot;beautifier\u0026quot; instead of data-bs-customClass=\u0026quot;beautifier\u0026quot;.\nAs of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\u0026quot;delay\u0026quot;:0, \u0026quot;title\u0026quot;:123}' and data-bs-title=\u0026quot;456\u0026quot; attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\u0026quot;show\u0026quot;:0,\u0026quot;hide\u0026quot;:150}'.\n  Name Type Default Description     backdrop boolean, 'static' true Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn\u0026rsquo;t close the modal when clicked.   focus boolean true Puts the focus on the modal when initialized.   keyboard boolean true Closes the modal when escape key is pressed.    Methods All API methods are asynchronous and start a transition. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. Learn more in our JavaScript docs.  Passing options Activates your content as a modal. Accepts an optional options object.\n  Method Description     dispose Destroys an element\u0026rsquo;s modal. (Removes stored data on the DOM element)   getInstance Static method which allows you to get the modal instance associated with a DOM element.   getOrCreateInstance Static method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn\u0026rsquo;t initialized.   handleUpdate Manually readjust the modal\u0026rsquo;s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears).   hide Manually hides a modal. Returns to the caller before the modal has actually been hidden (i.e. before the hidden.bs.modal event occurs).   show Manually opens a modal. Returns to the caller before the modal has actually been shown (i.e. before the shown.bs.modal event occurs). Also, you can pass a DOM element as an argument that can be received in the modal events (as the relatedTarget property). (i.e. const modalToggle = document.getElementById('toggleMyModal'); myModal.show(modalToggle).   toggle Manually toggles a modal. Returns to the caller before the modal has actually been shown or hidden (i.e. before the shown.bs.modal or hidden.bs.modal event occurs).    Events Bootstrap\u0026rsquo;s modal class exposes a few events for hooking into modal functionality. All modal events are fired at the modal itself (i.e. at the \u0026lt;div class=\u0026quot;modal\u0026quot;\u0026gt;).\n  Event Description     hide.bs.modal This event is fired immediately when the hide instance method has been called.   hidden.bs.modal This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).   hidePrevented.bs.modal This event is fired when the modal is shown, its backdrop is static and a click outside of the modal is performed. The event is also fired when the escape key is pressed and the keyboard option is set to false.   show.bs.modal This event fires immediately when the show instance method is called. If caused by a click, the clicked element is available as the relatedTarget property of the event.   shown.bs.modal This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete). If caused by a click, the clicked element is available as the relatedTarget property of the event.    ","description":"Use Bootstrap's JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.","permalink":"/docs/components/modal.html","tags":null,"title":"Modal"},{"contents":"Base nav Navigation available in Bootstrap share general markup and styles, from the base .nav class to the active and disabled states. Swap modifier classes to switch between each style.\nThe base .nav component is built with flexbox and provide a strong foundation for building all types of navigation components. It includes some style overrides (for working with lists), some link padding for larger hit areas, and basic disabled styling.\nThe base .nav component does not include any .active state. The following examples include the class, mainly to demonstrate that this particular class does not trigger any special styling.\nTo convey the active state to assistive technologies, use the aria-current attribute — using the page value for current page, or true for the current item in a set.\n Active  Link  Link  Disabled    View example's code      Classes are used throughout, so your markup can be super flexible. Use \u0026lt;ul\u0026gt;s like above, \u0026lt;ol\u0026gt; if the order of your items is important, or roll your own with a \u0026lt;nav\u0026gt; element. Because the .nav uses display: flex, the nav links behave the same as nav items would, but without the extra markup.\nActive Link Link Disabled   View example's code      Available styles Change the style of .navs component with modifiers and utilities. Mix and match as needed, or build your own.\nHorizontal alignment Change the horizontal alignment of your nav with flexbox utilities. By default, navs are left-aligned, but you can easily change them to center or right aligned.\nCentered with .justify-content-center:\nActive  Link  Link  Disabled    View example's code      Right-aligned with .justify-content-end:\nActive  Link  Link  Disabled    View example's code      Vertical Stack your navigation by changing the flex item direction with the .flex-column utility. Need to stack them on some viewports but not others? Use the responsive versions (e.g., .flex-sm-column).\nActive  Link  Link  Disabled    View example's code      As always, vertical navigation is possible without \u0026lt;ul\u0026gt;s, too.\nActive Link Link Disabled   View example's code      Tabs Takes the basic nav from above and adds the .nav-tabs class to generate a tabbed interface. Use them to create tabbable regions with our tab JavaScript plugin.\nActive  Link  Link  Disabled    View example's code      Pills Take that same HTML, but use .nav-pills instead:\nActive  Link  Link  Disabled    View example's code      Underline Take that same HTML, but use .nav-underline instead:\nActive  Link  Link  Disabled    View example's code      Fill and justify Force your .nav\u0026rsquo;s contents to extend the full available width one of two modifier classes. To proportionately fill all available space with your .nav-items, use .nav-fill. Notice that all horizontal space is occupied, but not every nav item has the same width.\nActive  Much longer nav link  Link  Disabled    View example's code      When using a \u0026lt;nav\u0026gt;-based navigation, you can safely omit .nav-item as only .nav-link is required for styling \u0026lt;a\u0026gt; elements.\nActive Much longer nav link Link Disabled   View example's code      For equal-width elements, use .nav-justified. All horizontal space will be occupied by nav links, but unlike the .nav-fill above, every nav item will be the same width.\nActive  Much longer nav link  Link  Disabled    View example's code      Similar to the .nav-fill example using a \u0026lt;nav\u0026gt;-based navigation.\nActive Much longer nav link Link Disabled   View example's code      Working with flex utilities If you need responsive nav variations, consider using a series of flexbox utilities. While more verbose, these utilities offer greater customization across responsive breakpoints. In the example below, our nav will be stacked on the lowest breakpoint, then adapt to a horizontal layout that fills the available width starting from the small breakpoint.\nActive Longer nav link Link Disabled   View example's code      Regarding accessibility If you\u0026rsquo;re using navs to provide a navigation bar, be sure to add a role=\u0026quot;navigation\u0026quot; to the most logical parent container of the \u0026lt;ul\u0026gt;, or wrap a \u0026lt;nav\u0026gt; element around the whole navigation. Do not add the role to the \u0026lt;ul\u0026gt; itself, as this would prevent it from being announced as an actual list by assistive technologies.\nNote that navigation bars, even if visually styled as tabs with the .nav-tabs class, should not be given role=\u0026quot;tablist\u0026quot;, role=\u0026quot;tab\u0026quot; or role=\u0026quot;tabpanel\u0026quot; attributes. These are only appropriate for dynamic tabbed interfaces, as described in the ARIA Authoring Practices Guide tabs pattern. See JavaScript behavior for dynamic tabbed interfaces in this section for an example. The aria-current attribute is not necessary on dynamic tabbed interfaces since our JavaScript handles the selected state by adding aria-selected=\u0026quot;true\u0026quot; on the active tab.\nUsing dropdowns Add dropdown menus with a little extra HTML and the dropdowns JavaScript plugin.\nTabs with dropdowns Active  Dropdown Action Another action Something else here  Separated link   Link  Disabled    View example's code      Pills with dropdowns Active  Dropdown Action Another action Something else here  Separated link   Link  Disabled    View example's code      CSS Variables Added in v5.2.0 As part of Bootstrap\u0026rsquo;s evolving CSS variables approach, navs now use local CSS variables on .nav, .nav-tabs, and .nav-pills for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nOn the .nav base class:\nscss/bootstrap/_nav.scss     On the .nav-tabs modifier class:\nscss/bootstrap/_nav.scss     On the .nav-pills modifier class:\nscss/bootstrap/_nav.scss     Sass variables scss/bootstrap/_variables.scss     JavaScript behavior Use the tab JavaScript plugin—include it individually or through the compiled bootstrap.js file—to extend our navigational tabs and pills to create tabbable panes of local content.\nHome  Profile  Contact  Disabled   This is some placeholder content the Home tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Profile tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Contact tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Disabled tab's associated content.\n   To help fit your needs, this works with \u0026lt;ul\u0026gt;-based markup, as shown above, or with any arbitrary \u0026ldquo;roll your own\u0026rdquo; markup. Note that if you\u0026rsquo;re using \u0026lt;nav\u0026gt;, you shouldn\u0026rsquo;t add role=\u0026quot;tablist\u0026quot; directly to it, as this would override the element\u0026rsquo;s native role as a navigation landmark. Instead, switch to an alternative element (in the example below, a simple \u0026lt;div\u0026gt;) and wrap the \u0026lt;nav\u0026gt; around it.\n Home Profile Contact Disabled   This is some placeholder content the Home tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Profile tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Contact tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Disabled tab's associated content.\n   The tabs plugin also works with pills.\nHome  Profile  Contact  Disabled   This is some placeholder content the Home tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Profile tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Contact tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Disabled tab's associated content.\n   And with vertical pills. Ideally, for vertical tabs, you should also add aria-orientation=\u0026quot;vertical\u0026quot; to the tab list container.\nHome Profile Disabled Messages Settings  This is some placeholder content the Home tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Profile tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Disabled tab's associated content.\n This is some placeholder content the Messages tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n This is some placeholder content the Settings tab's associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other .nav-powered navigation.\n    Accessibility Dynamic tabbed interfaces, as described in the ARIA Authoring Practices Guide tabs pattern, require role=\u0026quot;tablist\u0026quot;, role=\u0026quot;tab\u0026quot;, role=\u0026quot;tabpanel\u0026quot;, and additional aria- attributes in order to convey their structure, functionality, and current state to users of assistive technologies (such as screen readers). As a best practice, we recommend using \u0026lt;button\u0026gt; elements for the tabs, as these are controls that trigger a dynamic change, rather than links that navigate to a new page or location.\nIn line with the ARIA Authoring Practices pattern, only the currently active tab receives keyboard focus. When the JavaScript plugin is initialized, it will set tabindex=\u0026quot;-1\u0026quot; on all inactive tab controls. Once the currently active tab has focus, the cursor keys activate the previous/next tab, with the plugin changing the roving tabindex accordingly. However, note that the JavaScript plugin does not distinguish between horizontal and vertical tab lists when it comes to cursor key interactions: regardless of the tab list\u0026rsquo;s orientation, both the up and left cursor go to the previous tab, and down and right cursor go to the next tab.\nIn general, to facilitate keyboard navigation, it\u0026rsquo;s recommended to make the tab panels themselves focusable as well, unless the first element containing meaningful content inside the tab panel is already focusable. The JavaScript plugin does not try to handle this aspect—where appropriate, you\u0026rsquo;ll need to explicitly make your tab panels focusable by adding tabindex=\u0026quot;0\u0026quot; in your markup.  The tab JavaScript plugin does not support tabbed interfaces that contain dropdown menus, as these cause both usability and accessibility issues. From a usability perspective, the fact that the currently displayed tab\u0026rsquo;s trigger element is not immediately visible (as it\u0026rsquo;s inside the closed dropdown menu) can cause confusion. From an accessibility point of view, there is currently no sensible way to map this sort of construct to a standard WAI ARIA pattern, meaning that it cannot be easily made understandable to users of assistive technologies.  Using data attributes You can activate a tab or pill navigation without writing any JavaScript by simply specifying data-bs-toggle=\u0026quot;tab\u0026quot; or data-bs-toggle=\u0026quot;pill\u0026quot; on an element. Use these data attributes on .nav-tabs or .nav-pills.\nVia JavaScript Enable tabbable tabs via JavaScript (each tab needs to be activated individually):\nYou can activate individual tabs in several ways:\nFade effect To make tabs fade in, add .fade to each .tab-pane. The first tab pane must also have .show to make the initial content visible.\nMethods All API methods are asynchronous and start a transition. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. Learn more in our JavaScript docs.  Activates your content as a tab element.\nYou can create a tab instance with the constructor, for example:\n  Method Description     dispose Destroys an element\u0026rsquo;s tab.   getInstance Static method which allows you to get the tab instance associated with a DOM element, you can use it like this: bootstrap.Tab.getInstance(element).   getOrCreateInstance Static method which returns a tab instance associated to a DOM element or create a new one in case it wasn\u0026rsquo;t initialized. You can use it like this: bootstrap.Tab.getOrCreateInstance(element).   show Selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden. Returns to the caller before the tab pane has actually been shown (i.e. before the shown.bs.tab event occurs).    Events When showing a new tab, the events fire in the following order:\n hide.bs.tab (on the current active tab) show.bs.tab (on the to-be-shown tab) hidden.bs.tab (on the previous active tab, the same one as for the hide.bs.tab event) shown.bs.tab (on the newly-active just-shown tab, the same one as for the show.bs.tab event)  If no tab was already active, then the hide.bs.tab and hidden.bs.tab events will not be fired.\n  Event type Description     hide.bs.tab This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). Use event.target and event.relatedTarget to target the current active tab and the new soon-to-be-active tab, respectively.   hidden.bs.tab This event fires after a new tab is shown (and thus the previous active tab is hidden). Use event.target and event.relatedTarget to target the previous active tab and the new active tab, respectively.   show.bs.tab This event fires on tab show, but before the new tab has been shown. Use event.target and event.relatedTarget to target the active tab and the previous active tab (if available) respectively.   shown.bs.tab This event fires on tab show after a tab has been shown. Use event.target and event.relatedTarget to target the active tab and the previous active tab (if available) respectively.    ","description":"Documentation and examples for how to use Bootstrap's included navigation components.","permalink":"/docs/components/tabs.html","tags":null,"title":"Navs and tabs"},{"contents":"Style 01 Subscribe      View example's code      Style 02 Subscribe  I accept the terms \u0026 conditions and the data protection      View example's code      ","description":null,"permalink":"/docs/components/news-letter.html","tags":null,"title":"News Letter"},{"contents":"Default     1 2 3 ... 6        View example's code      Load More Read More   View example's code      Breadcrumb HomeLibrary       View example's code      ","description":"Use our pagination and breadcrumb examples to show that a series of related content exists across multiple pages and navigational hierarchy.","permalink":"/docs/components/pagination.html","tags":null,"title":"Pagination"},{"contents":"Component #1 Life style  How to Plop Hair for Bouncy, Beautiful Curls By Admin Jan 19th, 2021      View example's code      Component #2  Life style Jan 19th, 2021  How to Plop Hair for Bouncy, Beautiful Curls      View example's code      Component #3  Life styleJan 19th, 2021 How to Plop Hair for Bouncy, Beautiful Curls      View example's code      Component #4   Life style Jan 19th, 2021  How to Plop Hair for Bouncy, Beautiful Curls At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum...\nRead more         View example's code      Component #5 Life style  How to Plop Hair for Bouncy, Beautiful Curls By Admin Jan 19th, 2021  134 views  At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum...\nRead More    View example's code      Component #6  We believe even the smallest choices we make can have a significant impact over time.\nMaggie e. - Orlando, FLLife style  How to Plop Hair for Bouncy, Beautiful Curls By Admin Jan 19th, 2021  134 views  At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum...\nRead More    View example's code      Component #7  Life style  How to Plop Hair for Bouncy, Beautiful Curls By Admin Jan 19th, 2021  134 views  At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum...\nRead More    View example's code      Component #8 http://themeforest.net/user/g5theme Life style  How to Plop Hair for Bouncy, Beautiful Curls By Admin Jan 19th, 2021  134 views  At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum...\nRead More    View example's code      Component #9     Life style  How to Plop Hair for Bouncy, Beautiful Curls By Admin Jan 19th, 2021  134 views  At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum...\nRead More    View example's code      ","description":null,"permalink":"/docs/components/posts.html","tags":null,"title":"Post"},{"contents":"Component #1  -25%               $40.00 $30.00 Shield Conditioner                                 2947 reviews     View example's code      Component #2  -25%           Add To Cart  $40.00 $30.00 Shield Conditioner                                 2947 reviews     View example's code      Component #3                Enriched Duo $29.00     View example's code      Component #4  -25%  $40.00 $30.00 Shield Conditioner                                 2947 reviews At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident.\nAdd To Cart               View example's code      ","description":null,"permalink":"/docs/components/product.html","tags":null,"title":"Product"},{"contents":"About Use the ratio helper to manage the aspect ratios of external content like \u0026lt;iframe\u0026gt;s, \u0026lt;embed\u0026gt;s, \u0026lt;video\u0026gt;s, and \u0026lt;object\u0026gt;s. These helpers also can be used on any standard HTML child element (e.g., a \u0026lt;div\u0026gt; or \u0026lt;img\u0026gt;). Styles are applied from the parent .ratio class directly to the child.\nAspect ratios are declared in a Sass map and included in each class via CSS variable, which also allows custom aspect ratios.\nPro-Tip! You don\u0026rsquo;t need frameborder=\u0026quot;0\u0026quot; on your \u0026lt;iframe\u0026gt;s as we override that for you in Reboot.  Example Wrap any embed, like an \u0026lt;iframe\u0026gt;, in a parent element with .ratio and an aspect ratio class. The immediate child element is automatically sized thanks to our universal selector .ratio \u0026gt; *.\n   View example's code      Aspect ratios Aspect ratios can be customized with modifier classes. By default the following ratio classes are provided:\n1x1  4x3  16x9  21x9   View example's code      Custom ratios Each .ratio-* class includes a CSS custom property (or CSS variable) in the selector. You can override this CSS variable to create custom aspect ratios on the fly with some quick math on your part.\nFor example, to create a 2x1 aspect ratio, set --bs-aspect-ratio: 50% on the .ratio.\n2x1   View example's code      This CSS variable makes it easy to modify the aspect ratio across breakpoints. The following is 4x3 to start, but changes to a custom 2x1 at the medium breakpoint.\n 4x3, then 2x1   View example's code      Sass map Within _variables.scss, you can change the aspect ratios you want to use. Here\u0026rsquo;s our default $ratio-aspect-ratios map. Modify the map as you like and recompile your Sass to put them to use.\nsrc/assets/scss/_theme-variables.scss     ","description":"Use generated pseudo elements to make an element maintain the aspect ratio of your choosing. Perfect for responsively handling video or slideshow embeds based on the width of the parent.","permalink":"/docs/components/ratios.html","tags":null,"title":"Ratios"},{"contents":"Approach Reboot builds upon Normalize, providing many HTML elements with somewhat opinionated styles using only element selectors. Additional styling is done only with classes. For example, we reboot some \u0026lt;table\u0026gt; styles for a simpler baseline and later provide .table, .table-bordered, and more.\nHere are our guidelines and reasons for choosing what to override in Reboot:\n Update some browser default values to use rems instead of ems for scalable component spacing. Avoid margin-top. Vertical margins can collapse, yielding unexpected results. More importantly though, a single direction of margin is a simpler mental model. For easier scaling across device sizes, block elements should use rems for margins. Keep declarations of font-related properties to a minimum, using inherit whenever possible.  CSS variables Added in v5.2.0 With v5.1.1, we standardized our required @imports across all our CSS bundles (including bootstrap.css, bootstrap-reboot.css, and bootstrap-grid.css) to include _root.scss. This adds :root level CSS variables to all bundles, regardless of how many of them are used in that bundle. Ultimately Bootstrap 5 will continue to see more CSS variables added over time, in order to provide more real-time customization without the need to always recompile Sass. Our approach is to take our source Sass variables and transform them into CSS variables. That way, even if you don\u0026rsquo;t use CSS variables, you still have all the power of Sass. This is still in-progress and will take time to fully implement.\nFor example, consider these :root CSS variables for common \u0026lt;body\u0026gt; styles:\nscss/bootstrap/_root.scss     In practice, those variables are then applied in Reboot like so:\nscss/bootstrap/_reboot.scss     Which allows you to make real-time customizations however you like:\nPage defaults The \u0026lt;html\u0026gt; and \u0026lt;body\u0026gt; elements are updated to provide better page-wide defaults. More specifically:\n The box-sizing is globally set on every element—including *::before and *::after, to border-box. This ensures that the declared width of element is never exceeded due to padding or border.  No base font-size is declared on the \u0026lt;html\u0026gt;, but 16px is assumed (the browser default). font-size: 1rem is applied on the \u0026lt;body\u0026gt; for easy responsive type-scaling via media queries while respecting user preferences and ensuring a more accessible approach. This browser default can be overridden by modifying the $font-size-root variable.   The \u0026lt;body\u0026gt; also sets a global font-family, font-weight, line-height, and color. This is inherited later by some form elements to prevent font inconsistencies. For safety, the \u0026lt;body\u0026gt; has a declared background-color, defaulting to #fff.  Native font stack Bootstrap utilizes a \u0026ldquo;native font stack\u0026rdquo; or \u0026ldquo;system font stack\u0026rdquo; for optimum text rendering on every device and OS. These system fonts have been designed specifically with today\u0026rsquo;s devices in mind, with improved rendering on screens, variable font support, and more. Read more about native font stacks in this Smashing Magazine article.\nNote that because the font stack includes emoji fonts, many common symbol/dingbat Unicode characters will be rendered as multicolored pictographs. Their appearance will vary, depending on the style used in the browser/platform\u0026rsquo;s native emoji font, and they won\u0026rsquo;t be affected by any CSS color styles.\nThis font-family is applied to the \u0026lt;body\u0026gt; and automatically inherited globally throughout Bootstrap. To switch the global font-family, update $font-family-base and recompile Bootstrap.\nHeadings All heading elements—\u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; have their margin-top removed, margin-bottom: .5rem set, and line-height tightened. While headings inherit their color by default, you can also override it via optional CSS variable, --bs-heading-color.\n  Heading Example     \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; h1. Bootstrap heading   \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; h2. Bootstrap heading   \u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt; h3. Bootstrap heading   \u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt; h4. Bootstrap heading   \u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt; h5. Bootstrap heading   \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; h6. Bootstrap heading    Paragraphs All \u0026lt;p\u0026gt; elements have their margin-top removed and margin-bottom: 1rem set for easy spacing.\nThis is an example paragraph.\n View example's code      Links Links have a default color and underline applied. While links change on :hover, they don\u0026rsquo;t change based on whether someone :visited the link. They also receive no special :focus styles.\nThis is an example link  View example's code      As of v5.3.x, link color is set using rgba() and new -rgb CSS variables, allowing for easy customization of link color opacity. Change the link color opacity with the --bs-link-opacity CSS variable:\nThis is an example link  View example's code      Placeholder links—those without an href—are targeted with a more specific selector and have their color and text-decoration reset to their default values.\nThis is a placeholder link  View example's code      Horizontal rules The \u0026lt;hr\u0026gt; element has been simplified. Similar to browser defaults, \u0026lt;hr\u0026gt;s are styled via border-top, have a default opacity: .25, and automatically inherit their border-color via color, including when color is set via the parent. They can be modified with text, border, and opacity utilities.\n    View example's code      Lists All lists—\u0026lt;ul\u0026gt;, \u0026lt;ol\u0026gt;, and \u0026lt;dl\u0026gt;—have their margin-top removed and a margin-bottom: 1rem. Nested lists have no margin-bottom. We\u0026rsquo;ve also reset the padding-left on \u0026lt;ul\u0026gt; and \u0026lt;ol\u0026gt; elements.\n All lists have their top margin removed And their bottom margin normalized Nested lists have no bottom margin  This way they have a more even appearance Particularly when followed by more list items   The left padding has also been reset   Here\u0026rsquo;s an ordered list With a few list items It has the same overall look As the previous unordered list   For simpler styling, clear hierarchy, and better spacing, description lists have updated margins. \u0026lt;dd\u0026gt;s reset margin-left to 0 and add margin-bottom: .5rem. \u0026lt;dt\u0026gt;s are bolded.\n Description lists A description list is perfect for defining terms. Term Definition for the term. A second definition for the same term. Another term Definition for this other term.   Inline code Wrap inline snippets of code with \u0026lt;code\u0026gt;. Be sure to escape HTML angle brackets.\nFor example, \u0026lt;section\u0026gt; should be wrapped as inline.  View example's code      Code blocks Use \u0026lt;pre\u0026gt;s for multiple lines of code. Once again, be sure to escape any angle brackets in the code for proper rendering. The \u0026lt;pre\u0026gt; element is reset to remove its margin-top and use rem units for its margin-bottom.\n\u0026lt;p\u0026gt;Sample text here...\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;And another line of sample text here...\u0026lt;/p\u0026gt;   View example's code      Variables For indicating variables use the \u0026lt;var\u0026gt; tag.\ny = mx + b  View example's code      User input Use the \u0026lt;kbd\u0026gt; to indicate input that is typically entered via keyboard.\nTo switch directories, type cd followed by the name of the directory.\nTo edit settings, press Ctrl + ,  View example's code      Sample output For indicating sample output from a program use the \u0026lt;samp\u0026gt; tag.\nThis text is meant to be treated as sample output from a computer program.  View example's code      Tables Tables are slightly adjusted to style \u0026lt;caption\u0026gt;s, collapse borders, and ensure consistent text-align throughout. Additional changes for borders, padding, and more come with the .table class.\n  This is an example table, and this is its caption to describe the contents.    Table heading Table heading Table heading Table heading     Table cell Table cell Table cell Table cell   Table cell Table cell Table cell Table cell   Table cell Table cell Table cell Table cell     View example's code      Forms Various form elements have been rebooted for simpler base styles. Here are some of the most notable changes:\n \u0026lt;fieldset\u0026gt;s have no borders, padding, or margin so they can be easily used as wrappers for individual inputs or groups of inputs. \u0026lt;legend\u0026gt;s, like fieldsets, have also been restyled to be displayed as a heading of sorts. \u0026lt;label\u0026gt;s are set to display: inline-block to allow margin to be applied. \u0026lt;input\u0026gt;s, \u0026lt;select\u0026gt;s, \u0026lt;textarea\u0026gt;s, and \u0026lt;button\u0026gt;s are mostly addressed by Normalize, but Reboot removes their margin and sets line-height: inherit, too. \u0026lt;textarea\u0026gt;s are modified to only be resizable vertically as horizontal resizing often \u0026ldquo;breaks\u0026rdquo; page layout. \u0026lt;button\u0026gt;s and \u0026lt;input\u0026gt; button elements have cursor: pointer when :not(:disabled).  These changes, and more, are demonstrated below.\nSome date inputs types are not fully supported by the latest versions of Safari and Firefox.   Example legend  Example input  Example email  Example telephone  Example url  Example number  Example search  Example range  Example file input  Example select Choose... Option 1 Option 2 Option 3  Option 4 Option 5 Option 6     Check this checkbox    Option one is this and that   Option two is something else that's also super long to demonstrate the wrapping of these fancy form controls.   Option three is disabled   Example textarea   Example date  Example time  Example password  Example datetime-local  Example week  Example month  Example color  Example output 100  Button submit  Button submit   Pointers on buttons Reboot includes an enhancement for role=\u0026quot;button\u0026quot; to change the default cursor to pointer. Add this attribute to elements to help indicate elements are interactive. This role isn\u0026rsquo;t necessary for \u0026lt;button\u0026gt; elements, which get their own cursor change.\nNon-button element button  View example's code      Misc elements Address The \u0026lt;address\u0026gt; element is updated to reset the browser default font-style from italic to normal. line-height is also now inherited, and margin-bottom: 1rem has been added. \u0026lt;address\u0026gt;s are for presenting contact information for the nearest ancestor (or an entire body of work). Preserve formatting by ending lines with \u0026lt;br\u0026gt;.\n ACME Corporation\n1123 Fictional St,\nSan Francisco, CA 94103\nP: (123) 456-7890   Full Name\nfirst.last@example.com   Blockquote The default margin on blockquotes is 1em 40px, so we reset that to 0 0 1rem for something more consistent with other elements.\nA well-known quote, contained in a blockquote element.\n Someone famous in Source Title\n Inline elements The \u0026lt;abbr\u0026gt; element receives basic styling to make it stand out amongst paragraph text.\nThe HTML abbreviation element.  Summary The default cursor on summary is text, so we reset that to pointer to convey that the element can be interacted with by clicking on it.\n Some details More info about the details.\n Even more details Here are even more details about the details.\n  HTML5 [hidden] attribute HTML5 adds a new global attribute named [hidden], which is styled as display: none by default. Borrowing an idea from PureCSS, we improve upon this default by making [hidden] { display: none !important; } to help prevent its display from getting accidentally overridden.\nSince [hidden] is not compatible with jQuery\u0026rsquo;s $(...).hide() and $(...).show() methods, we don\u0026rsquo;t specifically endorse [hidden] over other techniques for managing the display of elements.  To merely toggle the visibility of an element, meaning its display is not modified and the element can still affect the flow of the document, use the .invisible class instead.\n","description":"Reboot, a collection of element-specific CSS changes in a single file, kickstart Bootstrap to provide an elegant, consistent, and simple baseline to build upon.","permalink":"/docs/content/reboot.html","tags":null,"title":"Reboot"},{"contents":"Examples While shadows on components are disabled by default in Bootstrap and can be enabled via $enable-shadows, you can also quickly add or remove a shadow with our box-shadow utility classes. Includes support for .shadow-none and three default sizes (which have associated variables to match).\nNo shadow Small shadow Regular shadow Larger shadow  View example's code      Sass Variables scss/bootstrap/_variables.scss     Utilities API Shadow utilities are declared in our utilities API in scss/_utilities.scss. Learn how to use the utilities API.\nscss/bootstrap/_utilities.scss     ","description":"Add or remove shadows to elements with box-shadow utilities.","permalink":"/docs/components/shadows.html","tags":null,"title":"Shadows"},{"contents":"Lineal Below you can find a list of all SVG icons used for Glowing. All these retina ready icons can be easily styled in color and size. For more new icons. Please visit Icomoon. And add it in the file /layouts/partials/svg-icons.html.\n      icon-heart     icon-user-light     icon-shopping-bag-open-light     icon-magnifying-glass-light     icon-long-arrow-right     icon-arrow-right     icon-box-01     icon-box-02     icon-box-03     icon-box-04     icon-box-05     icon-box-06     icon-box-07     icon-arrows-left-right-light     icon-eye-light     icon-heart-light     icon-list     icon-squares-four     icon-faders-horizontal     icon-Pencil     icon-ChatsCircle     icon-Camera     icon-SlidersHorizontal     icon-text-align-left-light     icon-like     icon-unlike     icon-Timer     icon-delivery-1     icon-Package     icon-plus     icon-check-bold     icon-ShareNetwork     icon-card     icon-paylay     icon-Play     icon-play-fill     icon-add-new     icon-status     icon-price     icon-heating     icon-family     icon-e1     icon-e2     icon-e3     icon-e4     icon-e5     icon-e6     icon-f1     icon-f2     icon-f3     icon-r     icon-quote     icon-chevron-left     icon-chevron-right     facebook     twitter     instagram     youtube     book     layer-group     pen-to-square     headset     location-dot    ","description":"Below you can find the list of all SVG icons included in Glowing.","permalink":"/docs/styleguide/svg-icons.html","tags":null,"title":"SVG Icon"},{"contents":"Overview Due to the widespread use of \u0026lt;table\u0026gt; elements across third-party widgets like calendars and date pickers, Bootstrap\u0026rsquo;s tables are opt-in. Add the base class .table to any \u0026lt;table\u0026gt;, then extend with our optional modifier classes or custom styles. All table styles are not inherited in Bootstrap, meaning any nested tables can be styled independent from the parent.\nUsing the most basic table markup, here\u0026rsquo;s how .table-based tables look in Bootstrap.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Variants Use contextual classes to color tables, table rows or individual cells.\nHeads up! Because of the more complicated CSS used to generate our table variants, they most likely won\u0026rsquo;t see color mode adaptive styling until v6.    Class Heading Heading     Default Cell Cell  Primary Cell Cell  Secondary Cell Cell  Success Cell Cell  Danger Cell Cell  Warning Cell Cell  Info Cell Cell  Light Cell Cell  Dark Cell Cell      Accessibility tip: Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the .visually-hidden class.  Accented tables Striped rows Use .table-striped to add zebra-striping to any table row within the \u0026lt;tbody\u0026gt;.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Striped columns Use .table-striped-columns to add zebra-striping to any table column.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     These classes can also be added to table variants:\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Hoverable rows Add .table-hover to enable a hover state on table rows within a \u0026lt;tbody\u0026gt;.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     These hoverable rows can also be combined with the striped rows variant:\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Active tables Highlight a table row or cell by adding a .table-active class.\n  # First Last Handle    1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle    1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     How do the variants and accented tables work? For the accented tables (striped rows, striped columns, hoverable rows, and active tables), we used some techniques to make these effects work for all our table variants:\n We start by setting the background of a table cell with the --bs-table-bg custom property. All table variants then set that custom property to colorize the table cells. This way, we don\u0026rsquo;t get into trouble if semi-transparent colors are used as table backgrounds. Then we add an inset box shadow on the table cells with box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg); to layer on top of any specified background-color. Because we use a huge spread and no blur, the color will be monotone. Since --bs-table-accent-bg is unset by default, we don\u0026rsquo;t have a default box shadow. When either .table-striped, .table-striped-columns, .table-hover or .table-active classes are added, the --bs-table-accent-bg is set to a semitransparent color to colorize the background. For each table variant, we generate a --bs-table-accent-bg color with the highest contrast depending on that color. For example, the accent color for .table-primary is darker while .table-dark has a lighter accent color. Text and border colors are generated the same way, and their colors are inherited by default.  Behind the scenes it looks like this:\nscss/bootstrap/mixins/_table-variants.scss     Table borders Bordered tables Add .table-bordered for borders on all sides of the table and cells.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Border color utilities can be added to change colors:\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Tables without borders Add .table-borderless for a table without borders.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Small tables Add .table-sm to make any .table more compact by cutting all cell padding in half.\n  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter       # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Table group dividers Add a thicker border, darker between table groups—\u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, and \u0026lt;tfoot\u0026gt;—with .table-group-divider. Customize the color by changing the border-top-color (which we don\u0026rsquo;t currently provide a utility class for at this time).\n  # First Last Handle    1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     View example's code      Vertical alignment Table cells of \u0026lt;thead\u0026gt; are always vertical aligned to the bottom. Table cells in \u0026lt;tbody\u0026gt; inherit their alignment from \u0026lt;table\u0026gt; and are aligned to the top by default. Use the vertical align classes to re-align where needed.\n  Heading 1 Heading 2 Heading 3 Heading 4     This cell inherits vertical-align: middle; from the table This cell inherits vertical-align: middle; from the table This cell inherits vertical-align: middle; from the table This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells.  This cell inherits vertical-align: bottom; from the table row This cell inherits vertical-align: bottom; from the table row This cell inherits vertical-align: bottom; from the table row This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells.   This cell inherits vertical-align: middle; from the table This cell inherits vertical-align: middle; from the table This cell is aligned to the top. This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells.      Nesting Border styles, active styles, and table variants are not inherited by nested tables.\n  # First Last Handle     1 Mark Otto @mdo     Header Header Header     A First Last   B First Last   C First Last       3 Larry the Bird @twitter     How nesting works To prevent any styles from leaking to nested tables, we use the child combinator (\u0026gt;) selector in our CSS. Since we need to target all the tds and ths in the thead, tbody, and tfoot, our selector would look pretty long without it. As such, we use the rather odd looking .table \u0026gt; :not(caption) \u0026gt; * \u0026gt; * selector to target all tds and ths of the .table, but none of any potential nested tables.\nNote that if you add \u0026lt;tr\u0026gt;s as direct children of a table, those \u0026lt;tr\u0026gt; will be wrapped in a \u0026lt;tbody\u0026gt; by default, thus making our selectors work as intended.\nAnatomy Table head Similar to tables and dark tables, use the modifier classes .table-light or .table-dark to make \u0026lt;thead\u0026gt;s appear light or dark gray.\n # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter      # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Table foot  # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     Footer Footer Footer Footer     Captions A \u0026lt;caption\u0026gt; functions like a heading for a table. It helps users with screen readers to find a table and understand what it\u0026rsquo;s about and decide if they want to read it.\nList of users   # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     You can also put the \u0026lt;caption\u0026gt; on the top of the table with .caption-top.\nList of users   # First Last Handle     1 Mark Otto @mdo   2 Jacob Thornton @fat   3 Larry the Bird @twitter     View example's code      Responsive tables Responsive tables allow tables to be scrolled horizontally with ease. Make any table responsive across all viewports by wrapping a .table with .table-responsive. Or, pick a maximum breakpoint with which to have a responsive table up to by using .table-responsive{-sm|-md|-lg|-xl|-xxl}.\nVertical clipping/truncation Responsive tables make use of overflow-y: hidden, which clips off any content that goes beyond the bottom or top edges of the table. In particular, this can clip off dropdown menus and other third-party widgets.  Always responsive Across every breakpoint, use .table-responsive for horizontally scrolling tables.\n  # Heading Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell Cell      Breakpoint specific Use .table-responsive{-sm|-md|-lg|-xl|-xxl} as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.\nThese tables may appear broken until their responsive styles apply at specific viewport widths.\n  # Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell        # Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell        # Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell        # Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell        # Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell        # Heading Heading Heading Heading Heading Heading Heading Heading     1 Cell Cell Cell Cell Cell Cell Cell Cell   2 Cell Cell Cell Cell Cell Cell Cell Cell   3 Cell Cell Cell Cell Cell Cell Cell Cell       CSS Sass variables src/assets/scss/_theme-variables.scss     Sass loop src/assets/scss/_theme-variables.scss     Customizing  The factor variables ($table-striped-bg-factor, $table-active-bg-factor \u0026amp; $table-hover-bg-factor) are used to determine the contrast in table variants. Apart from the light \u0026amp; dark table variants, theme colors are lightened by the $table-bg-scale variable.  ","description":"Documentation and examples for opt-in styling of tables (given their prevalent use in JavaScript plugins) with Bootstrap.","permalink":"/docs/content/tables.html","tags":null,"title":"Tables"},{"contents":"Style 01        Slava Fedutik - Founder, Chief Creative\n    View example's code      Style 02        Jennifer C. Founder, CEO\n    View example's code      ","description":null,"permalink":"/docs/components/team-member.html","tags":null,"title":"Team Member"},{"contents":"Style 01 “Also the customer service is phenomenal. I would purchase again.“\n   View example's code      Style 02 “ Amazing product. The results are so transformative in texture and my face feels plump and healthy. Highly recommend! “ JENNIFER C.         View example's code      Style 03 “Amazing product. The results are so transformative in texture and my face feels plump and healthy.“\nKathleen C.    View example's code      ","description":null,"permalink":"/docs/components/testimonials.html","tags":null,"title":"Testimonials"},{"contents":"System Requires Content   Download Theme Content   Theme Installation Content   Plugin Installation Content   ","description":"","permalink":"/docs/usage/theme-setting-up.html","tags":null,"title":"Theme setting up"},{"contents":"Overview Things to know when using the tooltip plugin:\n Tooltips rely on the third party library Popper for positioning. You must include popper.min.js before bootstrap.js, or use one bootstrap.bundle.min.js which contains Popper. Tooltips are opt-in for performance reasons, so you must initialize them yourself. Tooltips with zero-length titles are never displayed. Specify container: 'body' to avoid rendering problems in more complex components (like our input groups, button groups, etc). Triggering tooltips on hidden elements will not work. Tooltips for .disabled or disabled elements must be triggered on a wrapper element. When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use white-space: nowrap; on your \u0026lt;a\u0026gt;s to avoid this behavior. Tooltips must be hidden before their corresponding elements have been removed from the DOM. Tooltips can be triggered thanks to an element inside a shadow DOM.  Got all that? Great, let\u0026rsquo;s see how they work with some examples.\nBy default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the sanitizer section in our JavaScript documentation for more details.  The animation effect of this component is dependent on the prefers-reduced-motion media query. See the reduced motion section of our accessibility documentation.  Examples Enable tooltips As mentioned above, you must initialize tooltips before they can be used. One way to initialize all tooltips on a page would be to select them by their data-bs-toggle attribute, like so:\nTooltips on links Hover over the links below to see tooltips:\nPlaceholder text to demonstrate some inline links with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of real text. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you've now seen how these tooltips on links can work in practice, once you use them on your own site or project.\n View example's code      Feel free to use either title or data-bs-title in your HTML. When title is used, Popper will replace it automatically with data-bs-title when the element is rendered.  Custom tooltips Added in v5.2.0 You can customize the appearance of tooltips using CSS variables. We set a custom class with data-bs-custom-class=\u0026quot;custom-tooltip\u0026quot; to scope our custom appearance and use it to override a local CSS variable.\nCustom tooltip   View example's code      Directions Hover over the buttons below to see the four tooltips directions: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL.\nTooltip on top Tooltip on right Tooltip on bottom Tooltip on left Tooltip with HTML\"Tooltip with HTML   And with custom HTML added:\nWith an SVG:\n   CSS Variables Added in v5.2.0 As part of Bootstrap’s evolving CSS variables approach, tooltips now use local CSS variables on .tooltip for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\nscss/bootstrap/_tooltip.scss     Sass variables src/assets/scss/_theme-variables.scss     Usage The tooltip plugin generates content and markup on demand, and by default places tooltips after their trigger element. Trigger the tooltip via JavaScript:\nTooltips automatically attempt to change positions when a parent container has overflow: auto or overflow: scroll, but still keeps the original placement\u0026rsquo;s positioning. Set the boundary option (for the flip modifier using the popperConfig option) to any HTMLElement to override the default value, 'clippingParents', such as document.body:\n  Markup The required markup for a tooltip is only a data attribute and title on the HTML element you wish to have a tooltip. The generated markup of a tooltip is rather simple, though it does require a position (by default, set to top by the plugin).\nKeep tooltips accessible to keyboard and assistive technology users by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding tabindex=\u0026quot;0\u0026quot;, this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce tooltips in this situation. Additionally, do not rely solely on hover as the trigger for your tooltips as this will make theme impossible to trigger for keyboard users.  Disabled elements Elements with the disabled attribute aren\u0026rsquo;t interactive, meaning users cannot focus, hover, or click them to trigger a tooltip (or popover). As a workaround, you\u0026rsquo;ll want to trigger the tooltip from a wrapper \u0026lt;div\u0026gt; or \u0026lt;span\u0026gt;, ideally made keyboard-focusable using tabindex=\u0026quot;0\u0026quot;.\nDisabled button   View example's code       Options As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\u0026quot;{value}\u0026quot;. Make sure to change the case type of the option name from \u0026ldquo;camelCase\u0026rdquo; to \u0026ldquo;kebab-case\u0026rdquo; when passing the options via data attributes. For example, use data-bs-custom-class=\u0026quot;beautifier\u0026quot; instead of data-bs-customClass=\u0026quot;beautifier\u0026quot;.\nAs of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\u0026quot;delay\u0026quot;:0, \u0026quot;title\u0026quot;:123}' and data-bs-title=\u0026quot;456\u0026quot; attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\u0026quot;show\u0026quot;:0,\u0026quot;hide\u0026quot;:150}'.\nNote that for security reasons the sanitize, sanitizeFn, and allowList options cannot be supplied using data attributes.    Name Type Default Description     allowList object Default value Object which contains allowed attributes and tags.   animation boolean true Apply a CSS fade transition to the tooltip.   boundary string, element 'clippingParents' Overflow constraint boundary of the tooltip (applies only to Popper\u0026rsquo;s preventOverflow modifier). By default, it\u0026rsquo;s 'clippingParents' and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper\u0026rsquo;s detectOverflow docs.   container string, element, false false Appends the tooltip to a specific element. Example: container: 'body'. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element - which will prevent the tooltip from floating away from the triggering element during a window resize.   customClass string, function '' Add classes to the tooltip when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces: 'class-1 class-2'. You can also pass a function that should return a single string containing additional class names.   delay number, object 0 Delay showing and hiding the tooltip (ms)—doesn\u0026rsquo;t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is: delay: { \u0026quot;show\u0026quot;: 500, \u0026quot;hide\u0026quot;: 100 }.   fallbackPlacements array ['top', 'right', 'bottom', 'left'] Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper\u0026rsquo;s behavior docs.   html boolean false Allow HTML in the tooltip. If true, HTML tags in the tooltip\u0026rsquo;s title will be rendered in the tooltip. If false, innerText property will be used to insert content into the DOM. Use text if you\u0026rsquo;re worried about XSS attacks.   offset array, string, function [0, 0] Offset of the tooltip relative to its target. You can pass a string in data attributes with comma separated values like: data-bs-offset=\u0026quot;10,20\u0026quot;. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: skidding, distance. For more information refer to Popper\u0026rsquo;s offset docs.   placement string, function 'top' How to position the tooltip: auto, top, bottom, left, right. When auto is specified, it will dynamically reorient the tooltip. When a function is used to determine the placement, it is called with the tooltip DOM node as its first argument and the triggering element DOM node as its second. The this context is set to the tooltip instance.   popperConfig null, object, function null To change Bootstrap\u0026rsquo;s default Popper config, see Popper\u0026rsquo;s configuration. When a function is used to create the Popper configuration, it\u0026rsquo;s called with an object that contains the Bootstrap\u0026rsquo;s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.   sanitize boolean true Enable or disable the sanitization. If activated 'template', 'content' and 'title' options will be sanitized.   sanitizeFn null, function null Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization.   selector string, false false If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (jQuery.on support). See this issue and an informative example. Note: title attribute must not be used as a selector.   template string '\u0026lt;div class=\u0026quot;tooltip\u0026quot; role=\u0026quot;tooltip\u0026quot;\u0026gt;\u0026lt;div class=\u0026quot;tooltip-arrow\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026quot;tooltip-inner\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;' Base HTML to use when creating the tooltip. The tooltip\u0026rsquo;s title will be injected into the .tooltip-inner. .tooltip-arrow will become the tooltip\u0026rsquo;s arrow. The outermost wrapper element should have the .tooltip class and role=\u0026quot;tooltip\u0026quot;.   title string, element, function '' Default title value if title attribute isn\u0026rsquo;t present. If a function is given, it will be called with its this reference set to the element that the tooltip is attached to.   trigger string 'hover focus' How tooltip is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. 'manual' indicates that the tooltip will be triggered programmatically via the .tooltip('show'), .tooltip('hide') and .tooltip('toggle') methods; this value cannot be combined with any other trigger. 'hover' on its own will result in tooltips that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present.    Data attributes for individual tooltips Options for individual tooltips can alternatively be specified through the use of data attributes, as explained above.  Using function with popperConfig Methods All API methods are asynchronous and start a transition. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. Learn more in our JavaScript docs.    Method Description     disable Removes the ability for an element\u0026rsquo;s tooltip to be shown. The tooltip will only be able to be shown if it is re-enabled.   dispose Hides and destroys an element\u0026rsquo;s tooltip (Removes stored data on the DOM element). Tooltips that use delegation (which are created using the selector option) cannot be individually destroyed on descendant trigger elements.   enable Gives an element\u0026rsquo;s tooltip the ability to be shown. Tooltips are enabled by default.   getInstance Static method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn\u0026rsquo;t initialized.   getOrCreateInstance Static method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn\u0026rsquo;t initialized.   hide Hides an element\u0026rsquo;s tooltip. Returns to the caller before the tooltip has actually been hidden (i.e. before the hidden.bs.tooltip event occurs). This is considered a \u0026ldquo;manual\u0026rdquo; triggering of the tooltip.   setContent Gives a way to change the tooltip\u0026rsquo;s content after its initialization.   show Reveals an element\u0026rsquo;s tooltip. Returns to the caller before the tooltip has actually been shown (i.e. before the shown.bs.tooltip event occurs). This is considered a \u0026ldquo;manual\u0026rdquo; triggering of the tooltip. Tooltips with zero-length titles are never displayed.   toggle Toggles an element\u0026rsquo;s tooltip. Returns to the caller before the tooltip has actually been shown or hidden (i.e. before the shown.bs.tooltip or hidden.bs.tooltip event occurs). This is considered a \u0026ldquo;manual\u0026rdquo; triggering of the tooltip.   toggleEnabled Toggles the ability for an element\u0026rsquo;s tooltip to be shown or hidden.   update Updates the position of an element\u0026rsquo;s tooltip.    The setContent method accepts an object argument, where each property-key is a valid string selector within the tooltip template, and each related property-value can be string | element | function | null  Events   Event Description     hide.bs.tooltip This event is fired immediately when the hide instance method has been called.   hidden.bs.tooltip This event is fired when the tooltip has finished being hidden from the user (will wait for CSS transitions to complete).   inserted.bs.tooltip This event is fired after the show.bs.tooltip event when the tooltip template has been added to the DOM.   show.bs.tooltip This event fires immediately when the show instance method is called.   shown.bs.tooltip This event is fired when the tooltip has been made visible to the user (will wait for CSS transitions to complete).    ","description":"Documentation and examples for adding custom Bootstrap tooltips with CSS and JavaScript using CSS3 for animations and data-bs-attributes for local title storage.","permalink":"/docs/components/tooltips-popovers.html","tags":null,"title":"Tooltips"},{"contents":"Global settings Bootstrap sets basic global display, typography, and link styles. When more control is needed, check out the textual utility classes .\n Use a native font stack that selects the best font-family for each OS and device. For a more inclusive and accessible type scale, we use the browser\u0026rsquo;s default root font-size (typically 16px) so visitors can customize their browser defaults as needed. Use the $font-family-base, $font-size-base, and $line-height-base attributes as our typographic base applied to the \u0026lt;body\u0026gt;. Set the global link color via $link-color. Use $body-bg to set a background-color on the \u0026lt;body\u0026gt; (#fff by default).  These styles can be found within _reboot.scss, and the global variables are defined in _variables.scss. Make sure to set $font-size-base in rem.\nHeadings All HTML headings, \u0026lt;h1\u0026gt; through \u0026lt;h6\u0026gt;, are available.\n  Heading Example     \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; h1. Bootstrap heading   \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; h2. Bootstrap heading   \u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt; h3. Bootstrap heading   \u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt; h4. Bootstrap heading   \u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt; h5. Bootstrap heading   \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; h6. Bootstrap heading    .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but cannot use the associated HTML element.\nh1. Bootstrap heading\nh2. Bootstrap heading\nh3. Bootstrap heading\nh4. Bootstrap heading\nh5. Bootstrap heading\nh6. Bootstrap heading\n View example's code      Customizing headings Use the included utility classes to recreate the small secondary heading text from Bootstrap 3.\n Fancy display heading With faded secondary text   View example's code      Display headings Traditional heading elements are designed to work best in the meat of your page content. When you need a heading to stand out, consider using a display heading—a larger, slightly more opinionated heading style.\nDisplay 1 Display 2 Display 3 Display 4 Display 5 Display 6  Display headings are configured via the $display-font-sizes Sass map and two variables, $display-font-weight and $display-line-height.\nDisplay headings are customizable via two variables, $display-font-family and $display-font-style.\nsrc/assets/scss/_theme-variables.scss     Lead Make a paragraph stand out by adding .lead.\nThis is a lead paragraph. It stands out from regular paragraphs.  View example's code      Inline text elements Styling for common inline HTML5 elements.\nYou can use the mark tag to highlight text.\nThis line of text is meant to be treated as deleted text.\nThis line of text is meant to be treated as no longer accurate.\nThis line of text is meant to be treated as an addition to the document.\nThis line of text will render as underlined.\nThis line of text is meant to be treated as fine print.\nThis line rendered as bold text.\nThis line rendered as italicized text.\n View example's code      Beware that those tags should be used for semantic purpose:\n \u0026lt;mark\u0026gt; represents text which is marked or highlighted for reference or notation purposes. \u0026lt;small\u0026gt; represents side-comments and small print, like copyright and legal text. \u0026lt;s\u0026gt; represents element that are no longer relevant or no longer accurate. \u0026lt;u\u0026gt; represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation.  If you want to style your text, you should use the following classes instead:\n .mark will apply the same styles as \u0026lt;mark\u0026gt;. .small will apply the same styles as \u0026lt;small\u0026gt;. .text-decoration-underline will apply the same styles as \u0026lt;u\u0026gt;. .text-decoration-line-through will apply the same styles as \u0026lt;s\u0026gt;.  While not shown above, feel free to use \u0026lt;b\u0026gt; and \u0026lt;i\u0026gt; in HTML5. \u0026lt;b\u0026gt; is meant to highlight words or phrases without conveying additional importance, while \u0026lt;i\u0026gt; is mostly for voice, technical terms, etc.\nText utilities Change text alignment, transform, style, weight, line-height, decoration and color with our text utilities and color utilities.\nAbbreviations Stylized implementation of HTML\u0026rsquo;s \u0026lt;abbr\u0026gt; element for abbreviations and acronyms to show the expanded version on hover. Abbreviations have a default underline and gain a help cursor to provide additional context on hover and to users of assistive technologies.\nAdd .initialism to an abbreviation for a slightly smaller font-size.\nattr\nHTML\n View example's code      Blockquotes For quoting blocks of content from another source within your document. Wrap \u0026lt;blockquote class=\u0026quot;blockquote\u0026quot;\u0026gt; around any HTML as the quote.\nA well-known quote, contained in a blockquote element.\n  View example's code      Naming a source The HTML spec requires that blockquote attribution be placed outside the \u0026lt;blockquote\u0026gt;. When providing attribution, wrap your \u0026lt;blockquote\u0026gt; in a \u0026lt;figure\u0026gt; and use a \u0026lt;figcaption\u0026gt; or a block level element (e.g., \u0026lt;p\u0026gt;) with the .blockquote-footer class. Be sure to wrap the name of the source work in \u0026lt;cite\u0026gt; as well.\n A well-known quote, contained in a blockquote element.\n Someone famous in Source Title    View example's code      Alignment Use text utilities as needed to change the alignment of your blockquote.\nA well-known quote, contained in a blockquote element.\n Someone famous in Source Title    View example's code      A well-known quote, contained in a blockquote element.\n Someone famous in Source Title    View example's code      Lists Unstyled Remove the default list-style and left margin on list items (immediate children only). This only applies to immediate children list items, meaning you will need to add the class for any nested lists as well.\nThis is a list. It appears completely unstyled. Structurally, it's still a list. However, this style only applies to immediate child elements. Nested lists:  are unaffected by this style will still show a bullet and have appropriate left margin   This may still come in handy in some situations.   View example's code      Inline Remove a list\u0026rsquo;s bullets and apply some light margin with a combination of two classes, .list-inline and .list-inline-item.\nThis is a list item. And another one. But they're displayed inline.   View example's code      Description list alignment Align terms and descriptions horizontally by using our grid system\u0026rsquo;s predefined classes (or semantic mixins). For longer terms, you can optionally add a .text-truncate class to truncate the text with an ellipsis.\nDescription lists A description list is perfect for defining terms. Term Definition for the term.\nAnd some more placeholder definition text.\n Another term This definition is short, so no extra paragraphs or anything. Truncated term is truncated This can be useful when space is tight. Adds an ellipsis at the end. Nesting Nested definition list I heard you like definition lists. Let me put a definition list inside your definition list.     View example's code      Responsive font sizes In Bootstrap 5, we\u0026rsquo;ve enabled responsive font sizes by default, allowing text to scale more naturally across device and viewport sizes. Have a look at the RFS page to find out how this works.\nCSS Sass variables Headings have some dedicated variables for sizing and spacing.\nsrc/assets/scss/_theme-variables.scss     Miscellaneous typography elements covered here and in Reboot also have dedicated variables.\nsrc/assets/scss/_theme-variables.scss     Sass mixins There are no dedicated mixins for typography, but Bootstrap does use Responsive Font Sizing (RFS).\n","description":"Documentation and examples for Bootstrap typography, including global settings, headings, body text, lists, and more.","permalink":"/docs/content/typography.html","tags":null,"title":"Typography"}]